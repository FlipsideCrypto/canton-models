{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/catalog/v1.json", "dbt_version": "1.9.10", "generated_at": "2025-11-01T14:42:58.695492Z", "invocation_id": "0451f5ec-2472-410a-ac36-4105fead5276", "env": {}}, "nodes": {"model.canton_models.core__fact_round_opens": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_ROUND_OPENS", "database": "CANTON", "comment": "## Description\nTracks IssuingMiningRound contract creation events, representing when new mining rounds are opened and become active. Contains detailed per-coupon-type issuance rates and round timing information.\n\n## Key Use Cases\n- Monitoring mining round lifecycle (opening phase)\n- Understanding issuance rates for different reward types\n- Tracking round timing (opens_at, target_closes_at)\n- Analyzing reward distribution economics per round\n\n## Important Relationships\n- Counterpart to `core__fact_round_closes` (same round_number, different phases)\n- Links to reward coupon creation events via round_number\n- DSO party references governance\n\n## Commonly-used Fields\n- `round_number`: Sequential round identifier\n- `opens_at`: When the round opens\n- `target_closes_at`: Target closing time\n- `issuance_per_featured_app_coupon`: Issuance rate for featured apps\n- `issuance_per_unfeatured_app_coupon`: Issuance rate for unfeatured apps\n- `issuance_per_validator_coupon`: Issuance rate for validators\n- `issuance_per_sv_coupon`: Issuance rate for super validators\n- `dso_party`: The DSO party managing the round", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "ROUND_NUMBER": {"type": "NUMBER", "index": 7, "name": "ROUND_NUMBER", "comment": "Sequential number identifying a mining round in the Canton network."}, "OPENS_AT": {"type": "TIMESTAMP_NTZ", "index": 8, "name": "OPENS_AT", "comment": "Timestamp when a mining round opens."}, "TARGET_CLOSES_AT": {"type": "TIMESTAMP_NTZ", "index": 9, "name": "TARGET_CLOSES_AT", "comment": "Target timestamp for when a mining round should close."}, "ISSUANCE_PER_FEATURED_APP_COUPON": {"type": "NUMBER", "index": 10, "name": "ISSUANCE_PER_FEATURED_APP_COUPON", "comment": "Amount of amulets to issue per featured app reward coupon in this round."}, "ISSUANCE_PER_UNFEATURED_APP_COUPON": {"type": "NUMBER", "index": 11, "name": "ISSUANCE_PER_UNFEATURED_APP_COUPON", "comment": "Amount of amulets to issue per unfeatured app reward coupon in this round."}, "ISSUANCE_PER_VALIDATOR_COUPON": {"type": "NUMBER", "index": 12, "name": "ISSUANCE_PER_VALIDATOR_COUPON", "comment": "Amount of amulets to issue per validator reward coupon in this round."}, "ISSUANCE_PER_SV_COUPON": {"type": "NUMBER", "index": 13, "name": "ISSUANCE_PER_SV_COUPON", "comment": "Amount of amulets to issue per super validator reward coupon in this round."}, "ISSUANCE_PER_VALIDATOR_FAUCET_COUPON": {"type": "NUMBER", "index": 14, "name": "ISSUANCE_PER_VALIDATOR_FAUCET_COUPON", "comment": "Amount of amulets to issue per validator faucet coupon in this round (optional/may be NULL)."}, "DSO_PARTY": {"type": "TEXT", "index": 15, "name": "DSO_PARTY", "comment": "Party identifier for the DSO (Digital Synchronizer Operator) that manages network governance and operations."}, "CONTRACT_ID": {"type": "TEXT", "index": 16, "name": "CONTRACT_ID", "comment": "Unique identifier for the contract being created or exercised in this event."}, "TEMPLATE_ID": {"type": "TEXT", "index": 17, "name": "TEMPLATE_ID", "comment": "The template/type of the contract, including package information. Format: 'package_id:ModuleName:ContractType'"}, "CREATED_AT": {"type": "TIMESTAMP_NTZ", "index": 18, "name": "CREATED_AT", "comment": "Timestamp when the contract was created."}, "SIGNATORIES": {"type": "VARIANT", "index": 19, "name": "SIGNATORIES", "comment": "Array of party identifiers who are signatories to the contract."}, "OBSERVERS": {"type": "VARIANT", "index": 20, "name": "OBSERVERS", "comment": "Array of party identifiers who can observe the contract but are not signatories."}, "EVENT_JSON": {"type": "VARIANT", "index": 21, "name": "EVENT_JSON", "comment": "Full JSON object containing all event data. Useful for detailed analysis and accessing fields not explicitly extracted."}, "FACT_OPEN_ROUND_ID": {"type": "TEXT", "index": 22, "name": "FACT_OPEN_ROUND_ID", "comment": "Surrogate key generated from round_number"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 23, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 24, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 51568, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 18132992, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.core__fact_round_opens"}, "model.canton_models.gov__fact_vote_results": {"metadata": {"type": "BASE TABLE", "schema": "GOV", "name": "FACT_VOTE_RESULTS", "database": "CANTON", "comment": "## Description\nTracks DSO governance vote results/outcomes through DsoRules_CloseVoteRequest events. Shows final outcomes including acceptance/rejection, vote counts, accepted/rejected SVs, and abstentions. Uses LATERAL FLATTEN to parse votes array.\n\n## Key Use Cases\n- Analyzing governance decision outcomes\n- Understanding vote tallies and participation\n- Tracking which SVs voted for/against proposals\n- Monitoring abstention and offboarded voter patterns\n- Analyzing proposal success/failure rates\n\n## Important Relationships\n- Final step after `gov__fact_vote_requests` and `gov__fact_votes`\n- Aggregates individual votes into final result\n- Includes embedded original request details\n\n## Commonly-used Fields\n- `outcome`: Result tag (typically 'VRO_Accepted' or 'VRO_Rejected')\n- `accept_votes`: Count of accept votes\n- `reject_votes`: Count of reject votes\n- `accepted_svs`: Array of SV parties who voted to accept\n- `rejected_svs`: Array of SV parties who voted to reject\n- `abstaining_svs`: Array of SVs who abstained\n- `total_votes_cast`: Total number of votes\n- `completed_at`: When voting concluded\n- `requester`: Original proposal requester\n- `action`: Original proposal action\n- `reason_body`: Original proposal reason", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "CHOICE": {"type": "TEXT", "index": 7, "name": "CHOICE", "comment": "The choice/action/method being executed on a contract. Examples include 'DsoRules_RequestVote', 'AmuletRules_Transfer', 'LockedAmulet_Unlock', etc."}, "ACTING_PARTIES": {"type": "VARIANT", "index": 8, "name": "ACTING_PARTIES", "comment": "Array of party identifiers who are executing this action/choice."}, "REQUEST_CID": {"type": "TEXT", "index": 9, "name": "REQUEST_CID", "comment": "Generic contract ID for a request."}, "AMULET_RULES_CID": {"type": "TEXT", "index": 10, "name": "AMULET_RULES_CID", "comment": "Contract ID for an AmuletRules contract."}, "CLOSING_SV": {"type": "TEXT", "index": 11, "name": "CLOSING_SV", "comment": "Party identifier for the super validator closing a vote."}, "OUTCOME": {"type": "TEXT", "index": 12, "name": "OUTCOME", "comment": "Result of a vote: typically 'VRO_Accepted' or 'VRO_Rejected'."}, "OUTCOME_EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 13, "name": "OUTCOME_EFFECTIVE_AT", "comment": "Timestamp when a vote outcome becomes effective."}, "COMPLETED_AT": {"type": "TIMESTAMP_NTZ", "index": 14, "name": "COMPLETED_AT", "comment": "Timestamp when voting was completed and closed."}, "ACCEPTED_SVS": {"type": "ARRAY", "index": 15, "name": "ACCEPTED_SVS", "comment": "Array of super validator party IDs who voted to accept a proposal."}, "REJECTED_SVS": {"type": "ARRAY", "index": 16, "name": "REJECTED_SVS", "comment": "Array of super validator party IDs who voted to reject a proposal."}, "ABSTAINING_SVS": {"type": "VARIANT", "index": 17, "name": "ABSTAINING_SVS", "comment": "Array of super validator party IDs who abstained from voting."}, "OFFBOARDED_VOTERS": {"type": "VARIANT", "index": 18, "name": "OFFBOARDED_VOTERS", "comment": "Array of voter party IDs who were offboarded before voting completed."}, "TRACKING_CID": {"type": "TEXT", "index": 19, "name": "TRACKING_CID", "comment": "Contract ID used for tracking a request through its lifecycle."}, "REQUESTER": {"type": "TEXT", "index": 20, "name": "REQUESTER", "comment": "Party identifier for the party requesting a governance action or vote."}, "TARGET_EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 21, "name": "TARGET_EFFECTIVE_AT", "comment": "Target timestamp for when a governance action should become effective."}, "VOTE_BEFORE": {"type": "TIMESTAMP_NTZ", "index": 22, "name": "VOTE_BEFORE", "comment": "Timestamp by which votes must be cast."}, "ACTION": {"type": "TEXT", "index": 23, "name": "ACTION", "comment": "High-level action tag for a governance proposal."}, "DSO_ACTION": {"type": "TEXT", "index": 24, "name": "DSO_ACTION", "comment": "Specific DSO-related action being proposed."}, "AMULET_RULES_ACTION": {"type": "TEXT", "index": 25, "name": "AMULET_RULES_ACTION", "comment": "Specific amulet rules action being proposed."}, "DSO_ACTION_VALUE": {"type": "VARIANT", "index": 26, "name": "DSO_ACTION_VALUE", "comment": "JSON value containing details of the DSO action."}, "AMULET_RULES_VALUE": {"type": "VARIANT", "index": 27, "name": "AMULET_RULES_VALUE", "comment": "JSON value containing details of the amulet rules action."}, "REASON_BODY": {"type": "TEXT", "index": 28, "name": "REASON_BODY", "comment": "Text body explaining the reason for an action."}, "REASON_URL": {"type": "TEXT", "index": 29, "name": "REASON_URL", "comment": "URL providing additional information or justification for an action."}, "TOTAL_VOTES_CAST": {"type": "NUMBER", "index": 30, "name": "TOTAL_VOTES_CAST", "comment": "Total number of votes cast on a proposal."}, "ABSTAINING_COUNT": {"type": "NUMBER", "index": 31, "name": "ABSTAINING_COUNT", "comment": "Count of validators who abstained from voting."}, "OFFBOARDED_COUNT": {"type": "NUMBER", "index": 32, "name": "OFFBOARDED_COUNT", "comment": "Count of validators who were offboarded before voting completed."}, "ACCEPT_VOTES": {"type": "NUMBER", "index": 33, "name": "ACCEPT_VOTES", "comment": "Count of votes to accept a proposal."}, "REJECT_VOTES": {"type": "NUMBER", "index": 34, "name": "REJECT_VOTES", "comment": "Count of votes to reject a proposal."}, "CONTRACT_ID": {"type": "TEXT", "index": 35, "name": "CONTRACT_ID", "comment": "Unique identifier for the contract being created or exercised in this event."}, "FACT_VOTE_RESULT_ID": {"type": "TEXT", "index": 36, "name": "FACT_VOTE_RESULT_ID", "comment": "Surrogate key generated from event_id"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 37, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 38, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}, "EVENT_JSON": {"type": "VARIANT", "index": 39, "name": "EVENT_JSON", "comment": "Full JSON object containing all event data. Useful for detailed analysis and accessing fields not explicitly extracted."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 122, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 438272, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.gov__fact_vote_results"}, "model.canton_models.core__fact_amulet_unlocks": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_AMULET_UNLOCKS", "database": "CANTON", "comment": "## Description\nTracks unlocking/unstaking of locked amulets through exercise events. Joins to child Amulet created events to capture details of the newly created unlocked amulet.\n\n## Key Use Cases\n- Monitoring unstaking activity\n- Tracking unlock reasons and transaction types\n- Analyzing unlocked amounts and their destinations\n- Understanding validator unstaking patterns\n\n## Important Relationships\n- Counterpart to `core__fact_amulet_locks`\n- Joins parent unlock event to child Amulet creation event\n- Links to rounds via `round_number` and `open_round_cid`\n\n## Commonly-used Fields\n- `unlock_action`: Either 'unlock' or 'expire_lock'\n- `unlocked_amount`: Amount being unlocked\n- `owner`: Party receiving the unlocked amulet\n- `amulet_price`: USD price at time of unlock\n- `round_number`: Round in which unlock occurred\n- `unlock_reason`: Metadata describing why unlock happened\n- `locked_amulet_contract_id`: Original locked contract\n- `created_amulet_contract_id`: New unlocked amulet contract", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "CHOICE": {"type": "TEXT", "index": 7, "name": "CHOICE", "comment": "The choice/action/method being executed on a contract. Examples include 'DsoRules_RequestVote', 'AmuletRules_Transfer', 'LockedAmulet_Unlock', etc."}, "ACTING_PARTIES": {"type": "VARIANT", "index": 8, "name": "ACTING_PARTIES", "comment": "Array of party identifiers who are executing this action/choice."}, "UNLOCK_ACTION": {"type": "TEXT", "index": 9, "name": "UNLOCK_ACTION", "comment": "Type of unlock action: 'unlock' for normal unlock or 'expire_lock' for lock expiration."}, "OPEN_ROUND_CID": {"type": "TEXT", "index": 10, "name": "OPEN_ROUND_CID", "comment": "Contract ID reference to an open mining round."}, "UNLOCKED_AMULET_CID": {"type": "TEXT", "index": 11, "name": "UNLOCKED_AMULET_CID", "comment": "Contract ID of the unlocked amulet from exercise result"}, "AMULET_PRICE": {"type": "NUMBER", "index": 12, "name": "AMULET_PRICE", "comment": "USD price of one amulet at the time of the event."}, "ROUND_NUMBER": {"type": "NUMBER", "index": 13, "name": "ROUND_NUMBER", "comment": "Sequential number identifying a mining round in the Canton network."}, "UNLOCK_REASON": {"type": "TEXT", "index": 14, "name": "UNLOCK_REASON", "comment": "Metadata describing the reason for an unlock operation."}, "TX_KIND": {"type": "TEXT", "index": 15, "name": "TX_KIND", "comment": "Transaction kind metadata describing the type of transaction."}, "UNLOCKED_AMOUNT": {"type": "NUMBER", "index": 16, "name": "UNLOCKED_AMOUNT", "comment": "Amount of amulet being unlocked from a locked state."}, "CREATED_AT_ROUND": {"type": "NUMBER", "index": 17, "name": "CREATED_AT_ROUND", "comment": "Round when the amulet amount was originally created"}, "RATE_PER_ROUND": {"type": "NUMBER", "index": 18, "name": "RATE_PER_ROUND", "comment": "Rate at which fees or rewards accrue per mining round."}, "OWNER": {"type": "TEXT", "index": 19, "name": "OWNER", "comment": "Generic party identifier for an owner. Specific context determines what is owned."}, "AMULET_CREATED_AT": {"type": "TIMESTAMP_NTZ", "index": 20, "name": "AMULET_CREATED_AT", "comment": "Timestamp when the new unlocked amulet was created"}, "EVENT_TYPE": {"type": "TEXT", "index": 21, "name": "EVENT_TYPE", "comment": "Type of event: 'created_event' for contract creation or 'exercised_event' for method execution on existing contracts."}, "LOCKED_AMULET_CONTRACT_ID": {"type": "TEXT", "index": 22, "name": "LOCKED_AMULET_CONTRACT_ID", "comment": "Contract ID for a LockedAmulet contract."}, "CONSUMING": {"type": "BOOLEAN", "index": 23, "name": "CONSUMING", "comment": "Boolean indicating whether this action consumes/archives the contract."}, "CREATED_AMULET_CONTRACT_ID": {"type": "TEXT", "index": 24, "name": "CREATED_AMULET_CONTRACT_ID", "comment": "Contract ID for a newly created Amulet contract (typically after unlock)."}, "FACT_AMULET_UNLOCKS_ID": {"type": "TEXT", "index": 25, "name": "FACT_AMULET_UNLOCKS_ID", "comment": "Surrogate key generated from event_id"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 26, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 27, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 15026612, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 4731543040, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.core__fact_amulet_unlocks"}, "model.canton_models.core__fact_updates": {"metadata": {"type": "VIEW", "schema": "CORE", "name": "FACT_UPDATES", "database": "CANTON", "comment": "## Description\nTracks Canton update-level information. An update is a transaction that contains one or more events and represents an atomic change to the blockchain state.\n\n## Key Use Cases\n- Understanding transaction-level activity\n- Analyzing update throughput and patterns\n- Joining to events to see all changes in a single transaction\n- Tracking workflow and synchronizer information\n\n## Important Relationships\n- Parent table to `core__fact_events` (one update has many events)\n- Links to events via `update_id`\n\n## Commonly-used Fields\n- `update_id`: Unique identifier for the update\n- `migration_id`: Canton migration identifier\n- `effective_at`: When the update occurred\n- `synchronizer_id`: The synchronizer that processed the update\n- `workflow_id`: Workflow identifier\n- `root_event_ids`: The top-level events in this update\n- `event_count`: Number of events in this update", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "SYNCHRONIZER_ID": {"type": "TEXT", "index": 5, "name": "SYNCHRONIZER_ID", "comment": "Identifier for the Canton synchronizer that processed this update."}, "WORKFLOW_ID": {"type": "TEXT", "index": 6, "name": "WORKFLOW_ID", "comment": "Identifier for the workflow associated with this update."}, "ROOT_EVENT_IDS": {"type": "VARIANT", "index": 7, "name": "ROOT_EVENT_IDS", "comment": "Array of event IDs that are root-level events in this update."}, "EVENT_COUNT": {"type": "NUMBER", "index": 8, "name": "EVENT_COUNT", "comment": "Number of events contained in this update."}, "FACT_UPDATE_ID": {"type": "TEXT", "index": 9, "name": "FACT_UPDATE_ID", "comment": "Surrogate key generated from update_id"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 10, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 11, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.core__fact_updates"}, "model.canton_models.gov__fact_vote_requests": {"metadata": {"type": "BASE TABLE", "schema": "GOV", "name": "FACT_VOTE_REQUESTS", "database": "CANTON", "comment": "## Description\nTracks DSO governance vote requests/proposals through DsoRules_RequestVote events. Captures proposals for various DSO actions including granting featured app rights, updating rules, and other governance decisions.\n\n## Key Use Cases\n- Monitoring governance proposals and voting activity\n- Analyzing proposal types and actions being requested\n- Tracking requester patterns and proposal timing\n- Understanding governance participation\n\n## Important Relationships\n- Parent table to `gov__fact_votes` (proposals receive votes)\n- Links to `gov__fact_vote_results` via vote_request_cid\n- Action details drive governance changes\n\n## Commonly-used Fields\n- `requester`: Party proposing the vote\n- `target_effective_at`: When proposal should take effect\n- `vote_timeout_microseconds`: How long voting is open\n- `action`: High-level action tag\n- `dso_action`: Specific DSO action if applicable\n- `amulet_rules_action`: Specific amulet rules action if applicable\n- `reason_body`: Explanation of the proposal\n- `reason_url`: URL with more details\n- `vote_request_cid`: Contract ID of the vote request", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "CHOICE": {"type": "TEXT", "index": 7, "name": "CHOICE", "comment": "The choice/action/method being executed on a contract. Examples include 'DsoRules_RequestVote', 'AmuletRules_Transfer', 'LockedAmulet_Unlock', etc."}, "ACTING_PARTIES": {"type": "VARIANT", "index": 8, "name": "ACTING_PARTIES", "comment": "Array of party identifiers who are executing this action/choice."}, "REQUESTER": {"type": "TEXT", "index": 9, "name": "REQUESTER", "comment": "Party identifier for the party requesting a governance action or vote."}, "TARGET_EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 10, "name": "TARGET_EFFECTIVE_AT", "comment": "Target timestamp for when a governance action should become effective."}, "VOTE_TIMEOUT_MICROSECONDS": {"type": "NUMBER", "index": 11, "name": "VOTE_TIMEOUT_MICROSECONDS", "comment": "Duration in microseconds for how long voting remains open."}, "ACTION": {"type": "TEXT", "index": 12, "name": "ACTION", "comment": "High-level action tag for a governance proposal."}, "DSO_ACTION": {"type": "TEXT", "index": 13, "name": "DSO_ACTION", "comment": "Specific DSO-related action being proposed."}, "DSO_ACTION_VALUE": {"type": "VARIANT", "index": 14, "name": "DSO_ACTION_VALUE", "comment": "JSON value containing details of the DSO action."}, "AMULET_RULES_ACTION": {"type": "TEXT", "index": 15, "name": "AMULET_RULES_ACTION", "comment": "Specific amulet rules action being proposed."}, "AMULET_RULES_VALUE": {"type": "VARIANT", "index": 16, "name": "AMULET_RULES_VALUE", "comment": "JSON value containing details of the amulet rules action."}, "REASON_BODY": {"type": "TEXT", "index": 17, "name": "REASON_BODY", "comment": "Text body explaining the reason for an action."}, "REASON_URL": {"type": "TEXT", "index": 18, "name": "REASON_URL", "comment": "URL providing additional information or justification for an action."}, "VOTE_REQUEST_CID": {"type": "TEXT", "index": 19, "name": "VOTE_REQUEST_CID", "comment": "Contract ID for a vote request."}, "CONTRACT_ID": {"type": "TEXT", "index": 20, "name": "CONTRACT_ID", "comment": "Unique identifier for the contract being created or exercised in this event."}, "FACT_VOTE_REQUEST_ID": {"type": "TEXT", "index": 21, "name": "FACT_VOTE_REQUEST_ID", "comment": "Surrogate key generated from event_id"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 22, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 23, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 128, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 174080, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.gov__fact_vote_requests"}, "model.canton_models.gov__ez_validator_onboarding_lifecycle": {"metadata": {"type": "VIEW", "schema": "GOV", "name": "EZ_VALIDATOR_ONBOARDING_LIFECYCLE", "database": "CANTON", "comment": "## Description\nComprehensive EZ view providing a complete picture of validator lifecycle from request through onboarding and potential offboarding. Uses FULL OUTER JOIN to capture all validators regardless of request status, and includes an is_current flag for active validators.\n\n## Key Use Cases\n- Understanding complete validator journey\n- Analyzing active vs inactive validators\n- Tracking onboarding success rates and timing\n- Monitoring validator status changes over time\n- Reporting on current validator set\n\n## Important Relationships\n- Joins `gov__fact_validator_onboarding_requests`, `gov__fact_validator_onboarding_events`, `gov__fact_validator_offboarding_events`, and `gov__fact_validator_onboarding_request_expirations`\n- Comprehensive view suitable for dashboards and reporting\n\n## Commonly-used Fields\n- `is_current`: Boolean flag indicating if this is the current record for the validator\n- `validator_party`: Party ID of the validator\n- `validator_name`: Name of the validator\n- `onboarding_type`: 'validator' or 'super_validator'\n- `requested_at`: When onboarding was requested\n- `onboarded_at`: When onboarding was confirmed\n- `offboarded_at`: When validator was offboarded (if applicable)\n- `most_recent_timestamp`: Most recent activity timestamp for this validator", "owner": "DBT_CLOUD_CANTON"}, "columns": {"VALIDATOR_PARTY": {"type": "TEXT", "index": 1, "name": "VALIDATOR_PARTY", "comment": "Party identifier for a validator."}, "VALIDATOR_NAME": {"type": "TEXT", "index": 2, "name": "VALIDATOR_NAME", "comment": "Human-readable name for a validator."}, "VALIDATOR_TYPE": {"type": "TEXT", "index": 3, "name": "VALIDATOR_TYPE", "comment": "Type of validator: validator or super_validator"}, "ONBOARDING_REQUEST_CONTRACT_ID": {"type": "TEXT", "index": 4, "name": "ONBOARDING_REQUEST_CONTRACT_ID", "comment": "Contract ID for a validator onboarding request."}, "REQUEST_CREATED_AT": {"type": "TIMESTAMP_NTZ", "index": 5, "name": "REQUEST_CREATED_AT", "comment": "Timestamp when onboarding request was created"}, "REQUEST_SPONSOR": {"type": "TEXT", "index": 6, "name": "REQUEST_SPONSOR", "comment": "Sponsor party for the onboarding request"}, "REQUEST_EVENT_ID": {"type": "TEXT", "index": 7, "name": "REQUEST_EVENT_ID", "comment": "Event ID of the onboarding request"}, "ONBOARDED_AT": {"type": "TIMESTAMP_NTZ", "index": 8, "name": "ONBOARDED_AT", "comment": "Timestamp when onboarding was completed."}, "CONTACT_POINT": {"type": "TEXT", "index": 9, "name": "CONTACT_POINT", "comment": "Contact point for the validator"}, "ONBOARDING_SPONSOR": {"type": "TEXT", "index": 10, "name": "ONBOARDING_SPONSOR", "comment": "Sponsor party at time of onboarding"}, "VERSION": {"type": "TEXT", "index": 11, "name": "VERSION", "comment": "Version information"}, "VALIDATOR_LICENSE": {"type": "TEXT", "index": 12, "name": "VALIDATOR_LICENSE", "comment": "Validator license information"}, "SV_REWARD_WEIGHT": {"type": "NUMBER", "index": 13, "name": "SV_REWARD_WEIGHT", "comment": "Super validator reward weight"}, "ONBOARDING_EVENT_ID": {"type": "TEXT", "index": 14, "name": "ONBOARDING_EVENT_ID", "comment": "Event ID of the onboarding event"}, "EXPIRED_AT": {"type": "TIMESTAMP_NTZ", "index": 15, "name": "EXPIRED_AT", "comment": "Timestamp when expiration occurred."}, "EXPIRATION_TYPE": {"type": "TEXT", "index": 16, "name": "EXPIRATION_TYPE", "comment": "Type of expiration: 'dso_initiated' for DSO-triggered expiration or 'contract_consumed' for automatic contract expiration."}, "EXPIRATION_CHOICE": {"type": "TEXT", "index": 17, "name": "EXPIRATION_CHOICE", "comment": "Choice that triggered the expiration"}, "EXPIRATION_EVENT_ID": {"type": "TEXT", "index": 18, "name": "EXPIRATION_EVENT_ID", "comment": "Event ID of the expiration event"}, "OFFBOARDED_AT": {"type": "TIMESTAMP_NTZ", "index": 19, "name": "OFFBOARDED_AT", "comment": "Timestamp when offboarding occurred."}, "OFFBOARDING_EVENT_ID": {"type": "TEXT", "index": 20, "name": "OFFBOARDING_EVENT_ID", "comment": "Event ID of the offboarding event"}, "VALIDATOR_STATUS": {"type": "TEXT", "index": 21, "name": "VALIDATOR_STATUS", "comment": "Current status: active, offboarded, request_expired, request_pending, or unknown"}, "DAYS_FROM_REQUEST_TO_ONBOARDING": {"type": "NUMBER", "index": 22, "name": "DAYS_FROM_REQUEST_TO_ONBOARDING", "comment": "Number of days between request creation and onboarding completion"}, "DAYS_ACTIVE_BEFORE_OFFBOARDING": {"type": "NUMBER", "index": 23, "name": "DAYS_ACTIVE_BEFORE_OFFBOARDING", "comment": "Number of days validator was active before offboarding"}, "DAYS_ACTIVE_CURRENT": {"type": "NUMBER", "index": 24, "name": "DAYS_ACTIVE_CURRENT", "comment": "Number of days validator has been active (for currently active validators)"}, "MOST_RECENT_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 25, "name": "MOST_RECENT_TIMESTAMP", "comment": "Most recent timestamp across multiple possible event types for an entity."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 26, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 27, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "IS_CURRENT": {"type": "BOOLEAN", "index": 28, "name": "IS_CURRENT", "comment": "Boolean flag indicating whether this is the current/active record for an entity (used in lifecycle/timeline views)."}, "EZ_VALIDATOR_ONBOARDING_LIFECYCLE_ID": {"type": "TEXT", "index": 29, "name": "EZ_VALIDATOR_ONBOARDING_LIFECYCLE_ID", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.gov__ez_validator_onboarding_lifecycle"}, "model.canton_models.gov__fact_validator_onboarding_requests": {"metadata": {"type": "BASE TABLE", "schema": "GOV", "name": "FACT_VALIDATOR_ONBOARDING_REQUESTS", "database": "CANTON", "comment": "## Description\nTracks when super validators initiate the onboarding process by executing DsoRules_StartSvOnboarding. Captures the initial request with candidate information and onboarding tokens.\n\n## Key Use Cases\n- Monitoring new validator onboarding requests\n- Tracking onboarding request timing and actors\n- Analyzing candidate information and reasons\n- Linking requests to eventual onboarding events\n\n## Important Relationships\n- First step in validator lifecycle, links to `gov__fact_validator_onboarding_events`\n- Can link to `gov__fact_validator_onboarding_request_expirations` for expired requests\n- Part of `gov__ez_validator_onboarding_lifecycle` comprehensive view\n\n## Commonly-used Fields\n- `candidate_name`: Name of the validator candidate\n- `candidate_party`: Party ID of the candidate\n- `reason_url`: URL with reason for onboarding\n- `reason_body`: Text description of reason\n- `onboarding_token`: Token for the onboarding process\n- `onboarding_request_contract_id`: Contract ID of the created request", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "CHOICE": {"type": "TEXT", "index": 7, "name": "CHOICE", "comment": "The choice/action/method being executed on a contract. Examples include 'DsoRules_RequestVote', 'AmuletRules_Transfer', 'LockedAmulet_Unlock', etc."}, "ACTING_PARTIES": {"type": "VARIANT", "index": 8, "name": "ACTING_PARTIES", "comment": "Array of party identifiers who are executing this action/choice."}, "CHILD_EVENT_IDS": {"type": "VARIANT", "index": 9, "name": "CHILD_EVENT_IDS", "comment": ""}, "CONSUMING": {"type": "BOOLEAN", "index": 10, "name": "CONSUMING", "comment": ""}, "CANDIDATE_NAME": {"type": "TEXT", "index": 11, "name": "CANDIDATE_NAME", "comment": "Name of a validator candidate in an onboarding request."}, "CANDIDATE_PARTICIPANT_ID": {"type": "TEXT", "index": 12, "name": "CANDIDATE_PARTICIPANT_ID", "comment": ""}, "CANDIDATE_PARTY": {"type": "TEXT", "index": 13, "name": "CANDIDATE_PARTY", "comment": "Party identifier for a validator candidate."}, "SPONSOR": {"type": "TEXT", "index": 14, "name": "SPONSOR", "comment": ""}, "ONBOARDING_TOKEN": {"type": "TEXT", "index": 15, "name": "ONBOARDING_TOKEN", "comment": "Token used in the validator onboarding process."}, "ONBOARDING_REQUEST_CONTRACT_ID": {"type": "TEXT", "index": 16, "name": "ONBOARDING_REQUEST_CONTRACT_ID", "comment": "Contract ID for a validator onboarding request."}, "EVENT_TYPE": {"type": "TEXT", "index": 17, "name": "EVENT_TYPE", "comment": ""}, "CONTRACT_ID": {"type": "TEXT", "index": 18, "name": "CONTRACT_ID", "comment": "Unique identifier for the contract being created or exercised in this event."}, "PACKAGE_NAME": {"type": "TEXT", "index": 19, "name": "PACKAGE_NAME", "comment": ""}, "TEMPLATE_ID": {"type": "TEXT", "index": 20, "name": "TEMPLATE_ID", "comment": ""}, "INTERFACE_ID": {"type": "TEXT", "index": 21, "name": "INTERFACE_ID", "comment": ""}, "EVENT_JSON": {"type": "VARIANT", "index": 22, "name": "EVENT_JSON", "comment": ""}, "FACT_SV_ONBOARDING_REQUEST_ID": {"type": "TEXT", "index": 23, "name": "FACT_SV_ONBOARDING_REQUEST_ID", "comment": "Surrogate key generated from event_id"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 24, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 25, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 474, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 471552, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.gov__fact_validator_onboarding_requests"}, "model.canton_models.gov__fact_votes": {"metadata": {"type": "BASE TABLE", "schema": "GOV", "name": "FACT_VOTES", "database": "CANTON", "comment": "## Description\nTracks individual vote casting events (DsoRules_CastVote) in response to vote requests. Captures who voted, what they voted for, and timing of votes.\n\n## Key Use Cases\n- Analyzing voting patterns and participation\n- Tracking individual super validator votes\n- Understanding vote timing relative to requests\n- Monitoring governance engagement\n\n## Important Relationships\n- Child events to `gov__fact_vote_requests`\n- Links to vote requests via vote_request_cid\n- Aggregated in `gov__fact_vote_results`\n\n## Commonly-used Fields\n- `voter`: Party casting the vote\n- `vote_accept`: Boolean indicating accept/reject vote\n- `vote_request_cid`: Reference to the vote request\n- `effective_at`: When vote was cast", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "CHOICE": {"type": "TEXT", "index": 7, "name": "CHOICE", "comment": "The choice/action/method being executed on a contract. Examples include 'DsoRules_RequestVote', 'AmuletRules_Transfer', 'LockedAmulet_Unlock', etc."}, "REQUEST_CID": {"type": "TEXT", "index": 8, "name": "REQUEST_CID", "comment": "Contract ID for the request being voted on"}, "TRACKING_CID": {"type": "TEXT", "index": 9, "name": "TRACKING_CID", "comment": "Tracking contract ID for the vote request"}, "SV": {"type": "TEXT", "index": 10, "name": "SV", "comment": "Super validator party ID casting the vote"}, "ACCEPT": {"type": "BOOLEAN", "index": 11, "name": "ACCEPT", "comment": "Boolean indicating whether vote is to accept (TRUE) or reject (FALSE)"}, "OPT_CAST_AT": {"type": "TIMESTAMP_NTZ", "index": 12, "name": "OPT_CAST_AT", "comment": "Optional timestamp when vote was cast"}, "REASON": {"type": "VARIANT", "index": 13, "name": "REASON", "comment": "Reason provided for the vote"}, "CONTRACT_ID": {"type": "TEXT", "index": 14, "name": "CONTRACT_ID", "comment": "Unique identifier for the contract being created or exercised in this event."}, "VOTE_REQUEST_CID": {"type": "TEXT", "index": 15, "name": "VOTE_REQUEST_CID", "comment": "Contract ID for a vote request."}, "FACT_VOTE_ID": {"type": "TEXT", "index": 16, "name": "FACT_VOTE_ID", "comment": "Surrogate key generated from event_id"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 17, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 18, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 1505, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 691200, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.gov__fact_votes"}, "model.canton_models.bronze__updates": {"metadata": {"type": "BASE TABLE", "schema": "BRONZE", "name": "UPDATES", "database": "CANTON", "comment": null, "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": null}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": null}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": null}, "UPDATE_JSON": {"type": "VARIANT", "index": 4, "name": "UPDATE_JSON", "comment": null}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 5, "name": "INSERTED_TIMESTAMP", "comment": null}, "_INVOCATION_ID": {"type": "TEXT", "index": 6, "name": "_INVOCATION_ID", "comment": null}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 55239500, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-10-31 21:13UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 65629855232, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(record_time::DATE, migration_id)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.bronze__updates"}, "model.canton_models.silver__updates": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "UPDATES", "database": "CANTON", "comment": null, "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": null}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": null}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": null}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": null}, "SYNCHRONIZER_ID": {"type": "TEXT", "index": 5, "name": "SYNCHRONIZER_ID", "comment": null}, "WORKFLOW_ID": {"type": "TEXT", "index": 6, "name": "WORKFLOW_ID", "comment": null}, "ROOT_EVENT_IDS": {"type": "VARIANT", "index": 7, "name": "ROOT_EVENT_IDS", "comment": null}, "EVENT_IDS": {"type": "ARRAY", "index": 8, "name": "EVENT_IDS", "comment": null}, "EVENT_COUNT": {"type": "NUMBER", "index": 9, "name": "EVENT_COUNT", "comment": null}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 10, "name": "_INSERTED_TIMESTAMP", "comment": null}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 11, "name": "INSERTED_TIMESTAMP", "comment": null}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 12, "name": "MODIFIED_TIMESTAMP", "comment": null}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 55211998, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-10-31 22:13UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 30674831872, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE, migration_id)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.silver__updates"}, "model.canton_models.gov__fact_validator_offboarding_events": {"metadata": {"type": "BASE TABLE", "schema": "GOV", "name": "FACT_VALIDATOR_OFFBOARDING_EVENTS", "database": "CANTON", "comment": "## Description\nTracks when validators are removed from the network through DsoRules_OffboardSv events. Captures the offboarding decision and resulting state changes.\n\n## Key Use Cases\n- Monitoring validator exits from the network\n- Understanding offboarding reasons and actors\n- Tracking DSO rule updates from offboardings\n- Analyzing validator lifecycle completion\n\n## Important Relationships\n- Final step in validator lifecycle from `gov__fact_validator_onboarding_events`\n- Part of `gov__ez_validator_onboarding_lifecycle` comprehensive view\n- Links to validator activity tables via offboarded_sv_party\n\n## Commonly-used Fields\n- `offboarded_sv_party`: Party ID of the offboarded validator\n- `reason_url`: URL explaining offboarding reason\n- `reason_body`: Text description of offboarding reason\n- `new_dso_rules_contract_id`: Updated DSO rules after offboarding\n- `effective_at`: When offboarding occurred", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "CHOICE": {"type": "TEXT", "index": 7, "name": "CHOICE", "comment": "The choice/action/method being executed on a contract. Examples include 'DsoRules_RequestVote', 'AmuletRules_Transfer', 'LockedAmulet_Unlock', etc."}, "ACTING_PARTIES": {"type": "VARIANT", "index": 8, "name": "ACTING_PARTIES", "comment": "Array of party identifiers who are executing this action/choice."}, "CHILD_EVENT_IDS": {"type": "VARIANT", "index": 9, "name": "CHILD_EVENT_IDS", "comment": ""}, "CONSUMING": {"type": "BOOLEAN", "index": 10, "name": "CONSUMING", "comment": ""}, "OFFBOARDED_SV_PARTY": {"type": "TEXT", "index": 11, "name": "OFFBOARDED_SV_PARTY", "comment": "Party identifier for a super validator being offboarded."}, "NEW_DSO_RULES_CONTRACT_ID": {"type": "TEXT", "index": 12, "name": "NEW_DSO_RULES_CONTRACT_ID", "comment": "Contract ID for updated DSO rules after a governance action."}, "EVENT_TYPE": {"type": "TEXT", "index": 13, "name": "EVENT_TYPE", "comment": ""}, "CONTRACT_ID": {"type": "TEXT", "index": 14, "name": "CONTRACT_ID", "comment": "Unique identifier for the contract being created or exercised in this event."}, "PACKAGE_NAME": {"type": "TEXT", "index": 15, "name": "PACKAGE_NAME", "comment": ""}, "TEMPLATE_ID": {"type": "TEXT", "index": 16, "name": "TEMPLATE_ID", "comment": ""}, "INTERFACE_ID": {"type": "TEXT", "index": 17, "name": "INTERFACE_ID", "comment": ""}, "EVENT_JSON": {"type": "VARIANT", "index": 18, "name": "EVENT_JSON", "comment": ""}, "FACT_VALIDATOR_OFFBOARDING_EVENT_ID": {"type": "TEXT", "index": 19, "name": "FACT_VALIDATOR_OFFBOARDING_EVENT_ID", "comment": "Surrogate key generated from event_id"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 20, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 21, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 3, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 14848, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.gov__fact_validator_offboarding_events"}, "model.canton_models.core__fact_round_closes": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_ROUND_CLOSES", "database": "CANTON", "comment": "## Description\nTracks SummarizingMiningRound contract creation events, representing when mining rounds close and summarize their results. Contains issuance configuration, reward caps, and amulet price information.\n\n## Key Use Cases\n- Monitoring mining round lifecycle (closing/summary phase)\n- Analyzing issuance configuration per round\n- Understanding reward percentage allocations\n- Tracking amulet price at round close\n- Monitoring reward caps for different participant types\n\n## Important Relationships\n- Counterpart to `core__fact_round_opens` (same round_number, different phases)\n- Amulet price links to various reward calculations\n- Issuance config drives reward distribution\n\n## Commonly-used Fields\n- `round_number`: Sequential round identifier\n- `amulet_to_issue_per_year`: Annual issuance target\n- `validator_reward_percentage`: Percentage allocated to validators\n- `app_reward_percentage`: Percentage allocated to apps\n- `validator_reward_cap`: Maximum validator rewards\n- `featured_app_reward_cap`: Maximum featured app rewards\n- `unfeatured_app_reward_cap`: Maximum unfeatured app rewards\n- `amulet_price_usd`: USD price of amulet at round close\n- `tick_duration_microseconds`: Duration of each tick in the round", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "ROUND_NUMBER": {"type": "NUMBER", "index": 7, "name": "ROUND_NUMBER", "comment": "Sequential number identifying a mining round in the Canton network."}, "AMULET_TO_ISSUE_PER_YEAR": {"type": "NUMBER", "index": 8, "name": "AMULET_TO_ISSUE_PER_YEAR", "comment": "Target annual issuance rate of amulets in the issuance configuration."}, "VALIDATOR_REWARD_PERCENTAGE": {"type": "NUMBER", "index": 9, "name": "VALIDATOR_REWARD_PERCENTAGE", "comment": "Percentage of issuance allocated to validator rewards."}, "APP_REWARD_PERCENTAGE": {"type": "NUMBER", "index": 10, "name": "APP_REWARD_PERCENTAGE", "comment": "Percentage of issuance allocated to application rewards."}, "VALIDATOR_REWARD_CAP": {"type": "NUMBER", "index": 11, "name": "VALIDATOR_REWARD_CAP", "comment": "Maximum amulet amount for validator rewards."}, "FEATURED_APP_REWARD_CAP": {"type": "NUMBER", "index": 12, "name": "FEATURED_APP_REWARD_CAP", "comment": "Maximum amulet amount for featured app rewards."}, "UNFEATURED_APP_REWARD_CAP": {"type": "NUMBER", "index": 13, "name": "UNFEATURED_APP_REWARD_CAP", "comment": "Maximum amulet amount for unfeatured app rewards."}, "VALIDATOR_FAUCET_CAP": {"type": "NUMBER", "index": 14, "name": "VALIDATOR_FAUCET_CAP", "comment": "Maximum amulet amount for validator faucet (optional/may be NULL)."}, "AMULET_PRICE_USD": {"type": "NUMBER", "index": 15, "name": "AMULET_PRICE_USD", "comment": "USD price of one amulet."}, "TICK_DURATION_MICROSECONDS": {"type": "NUMBER", "index": 16, "name": "TICK_DURATION_MICROSECONDS", "comment": "Duration of each tick in microseconds."}, "DSO_PARTY": {"type": "TEXT", "index": 17, "name": "DSO_PARTY", "comment": "Party identifier for the DSO (Digital Synchronizer Operator) that manages network governance and operations."}, "EVENT_TYPE": {"type": "TEXT", "index": 18, "name": "EVENT_TYPE", "comment": "Type of event: 'created_event' for contract creation or 'exercised_event' for method execution on existing contracts."}, "CONTRACT_ID": {"type": "TEXT", "index": 19, "name": "CONTRACT_ID", "comment": "Unique identifier for the contract being created or exercised in this event."}, "PACKAGE_NAME": {"type": "TEXT", "index": 20, "name": "PACKAGE_NAME", "comment": "The Canton package name containing the contract template."}, "TEMPLATE_ID": {"type": "TEXT", "index": 21, "name": "TEMPLATE_ID", "comment": "The template/type of the contract, including package information. Format: 'package_id:ModuleName:ContractType'"}, "CREATED_AT": {"type": "TIMESTAMP_NTZ", "index": 22, "name": "CREATED_AT", "comment": "Timestamp when the contract was created."}, "SIGNATORIES": {"type": "VARIANT", "index": 23, "name": "SIGNATORIES", "comment": "Array of party identifiers who are signatories to the contract."}, "OBSERVERS": {"type": "VARIANT", "index": 24, "name": "OBSERVERS", "comment": "Array of party identifiers who can observe the contract but are not signatories."}, "ISSUANCE_CONFIG": {"type": "VARIANT", "index": 25, "name": "ISSUANCE_CONFIG", "comment": "JSON object containing full issuance configuration."}, "EVENT_JSON": {"type": "VARIANT", "index": 26, "name": "EVENT_JSON", "comment": "Full JSON object containing all event data. Useful for detailed analysis and accessing fields not explicitly extracted."}, "FACT_MINING_ROUND_ID": {"type": "TEXT", "index": 27, "name": "FACT_MINING_ROUND_ID", "comment": "Surrogate key generated from round_number"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 28, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 29, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 51568, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 14820864, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.core__fact_round_closes"}, "model.canton_models.core__fact_transfers": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_TRANSFERS", "database": "CANTON", "comment": "## Description\nComprehensive fact table tracking all amulet transfer operations across multiple transfer-related choices. Handles various transfer types including direct transfers, transfer commands, factory transfers, and preapproved transfers.\n\n## Key Use Cases\n- Analyzing transfer volume and patterns\n- Tracking sender/receiver relationships\n- Understanding transfer amounts and fees\n- Monitoring different transfer mechanisms (direct, command, preapproval, factory)\n\n## Important Relationships\n- Links to balance changes through `event_id`\n- References rounds and amulet rules through context\n- Provider field links to service providers facilitating transfers\n\n## Commonly-used Fields\n- `choice`: Type of transfer (AmuletRules_Transfer, TransferCommand_Send, etc.)\n- `amount`: Transfer amount (from choice_argument)\n- `sender`: Sending party\n- `receiver`: Receiving party\n- `provider`: Service provider facilitating the transfer\n- `amulet_amount`: Actual amulet paid (from exercise_result)\n- `transfer_summary`: Summary of transfer including fees and amounts", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "CHOICE": {"type": "TEXT", "index": 7, "name": "CHOICE", "comment": "The choice/action/method being executed on a contract. Examples include 'DsoRules_RequestVote', 'AmuletRules_Transfer', 'LockedAmulet_Unlock', etc."}, "ACTING_PARTIES": {"type": "VARIANT", "index": 8, "name": "ACTING_PARTIES", "comment": "Array of party identifiers who are executing this action/choice."}, "AMOUNT": {"type": "NUMBER", "index": 9, "name": "AMOUNT", "comment": "Generic numeric amount field. Context determines what is being measured (transfer amount, reward amount, etc.)."}, "SENDER": {"type": "TEXT", "index": 10, "name": "SENDER", "comment": "Party identifier for the sender in a transfer operation."}, "RECEIVER": {"type": "TEXT", "index": 11, "name": "RECEIVER", "comment": "Party identifier for the receiver in a transfer operation."}, "PROVIDER": {"type": "TEXT", "index": 12, "name": "PROVIDER", "comment": "Party identifier for a service provider facilitating an operation (often transfers)."}, "DELEGATE": {"type": "TEXT", "index": 13, "name": "DELEGATE", "comment": "Party identifier for a delegate who can act on behalf of another party."}, "DESCRIPTION": {"type": "TEXT", "index": 14, "name": "DESCRIPTION", "comment": "Text description providing context for an operation."}, "NONCE": {"type": "TEXT", "index": 15, "name": "NONCE", "comment": "Unique nonce value for ensuring transaction uniqueness."}, "EXPIRES_AT": {"type": "TIMESTAMP_NTZ", "index": 16, "name": "EXPIRES_AT", "comment": "Timestamp when something expires (transfer preapproval, lock, etc.)."}, "EXPECTED_DSO": {"type": "TEXT", "index": 17, "name": "EXPECTED_DSO", "comment": "Expected DSO party identifier for validation purposes."}, "CONTEXT": {"type": "VARIANT", "index": 18, "name": "CONTEXT", "comment": "JSON object containing contextual information for an operation."}, "TRANSFER_OBJECT": {"type": "VARIANT", "index": 19, "name": "TRANSFER_OBJECT", "comment": "JSON object containing full transfer details."}, "TRANSFER_COMMAND_CID": {"type": "TEXT", "index": 20, "name": "TRANSFER_COMMAND_CID", "comment": "Contract ID for a TransferCommand contract."}, "TRANSFER_PREAPPROVAL_CID": {"type": "TEXT", "index": 21, "name": "TRANSFER_PREAPPROVAL_CID", "comment": "Contract ID for a TransferPreapproval contract."}, "AMULET_AMOUNT": {"type": "NUMBER", "index": 22, "name": "AMULET_AMOUNT", "comment": "Specific amount of amulets paid or transferred."}, "TRANSFER_SUMMARY": {"type": "VARIANT", "index": 23, "name": "TRANSFER_SUMMARY", "comment": "JSON object summarizing transfer results including fees and amounts."}, "TRANSFER_META": {"type": "VARIANT", "index": 24, "name": "TRANSFER_META", "comment": "JSON object containing transfer metadata."}, "EVENT_TYPE": {"type": "TEXT", "index": 25, "name": "EVENT_TYPE", "comment": "Type of event: 'created_event' for contract creation or 'exercised_event' for method execution on existing contracts."}, "CONTRACT_ID": {"type": "TEXT", "index": 26, "name": "CONTRACT_ID", "comment": "Unique identifier for the contract being created or exercised in this event."}, "PACKAGE_NAME": {"type": "TEXT", "index": 27, "name": "PACKAGE_NAME", "comment": "The Canton package name containing the contract template."}, "TEMPLATE_ID": {"type": "TEXT", "index": 28, "name": "TEMPLATE_ID", "comment": "The template/type of the contract, including package information. Format: 'package_id:ModuleName:ContractType'"}, "CONSUMING": {"type": "BOOLEAN", "index": 29, "name": "CONSUMING", "comment": "Boolean indicating whether this action consumes/archives the contract."}, "FACT_TRANSFER_ID": {"type": "TEXT", "index": 30, "name": "FACT_TRANSFER_ID", "comment": "Surrogate key generated from event_id"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 31, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 32, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 69033389, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 22984474112, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.core__fact_transfers"}, "model.canton_models.gov__fact_validator_rewards": {"metadata": {"type": "BASE TABLE", "schema": "GOV", "name": "FACT_VALIDATOR_REWARDS", "database": "CANTON", "comment": "## Description\nTracks validator reward claims via AmuletRules_Transfer events where metadata contains validator-rewards information. Captures reward amounts, burned amounts, and net rewards.\n\n## Key Use Cases\n- Analyzing validator reward distribution\n- Calculating net rewards after burns\n- Tracking reward timing by mining round\n- Monitoring validator economics and incentives\n\n## Important Relationships\n- Links to mining rounds via round_number\n- Links to validators via validator_party\n- Related to `gov__fact_validator_activity` (activity enables rewards)\n\n## Commonly-used Fields\n- `validator_party`: Party receiving the reward\n- `reward_amount`: Gross reward amount from metadata\n- `burned_amount`: Amount burned in the process\n- `net_reward_amount`: Calculated field (reward_amount - burned_amount)\n- `mining_round`: Round number associated with reward\n- `round_number`: Round from exercise result", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "CHOICE": {"type": "TEXT", "index": 7, "name": "CHOICE", "comment": "The choice/action/method being executed on a contract. Examples include 'DsoRules_RequestVote', 'AmuletRules_Transfer', 'LockedAmulet_Unlock', etc."}, "ACTING_PARTIES": {"type": "VARIANT", "index": 8, "name": "ACTING_PARTIES", "comment": "Array of party identifiers who are executing this action/choice."}, "VALIDATOR_RIGHTS": {"type": "VARIANT", "index": 9, "name": "VALIDATOR_RIGHTS", "comment": "JSON object describing validator rights and capabilities."}, "ISSUING_MINING_ROUNDS": {"type": "VARIANT", "index": 10, "name": "ISSUING_MINING_ROUNDS", "comment": "JSON array of issuing mining rounds from context."}, "MINING_ROUND": {"type": "VARIANT", "index": 11, "name": "MINING_ROUND", "comment": "Mining round number from context or choice arguments."}, "VALIDATOR_PARTY": {"type": "TEXT", "index": 12, "name": "VALIDATOR_PARTY", "comment": "Party identifier for a validator."}, "EXERCISE_RESULT": {"type": "VARIANT", "index": 13, "name": "EXERCISE_RESULT", "comment": "JSON object containing the full result of exercising a choice on a contract."}, "REWARD_AMOUNT": {"type": "NUMBER", "index": 14, "name": "REWARD_AMOUNT", "comment": "Amount of reward (in amulets) being distributed or processed."}, "BURNED_AMOUNT": {"type": "NUMBER", "index": 15, "name": "BURNED_AMOUNT", "comment": "Amount of amulets burned in a transaction."}, "NET_REWARD_AMOUNT": {"type": "NUMBER", "index": 16, "name": "NET_REWARD_AMOUNT", "comment": "Net reward amount after subtracting burns (reward_amount - burned_amount)."}, "ALL_META_VALUES": {"type": "VARIANT", "index": 17, "name": "ALL_META_VALUES", "comment": "JSON object containing all metadata key-value pairs."}, "TRANSFER_SUMMARY": {"type": "VARIANT", "index": 18, "name": "TRANSFER_SUMMARY", "comment": "JSON object summarizing transfer results including fees and amounts."}, "ROUND_NUMBER": {"type": "NUMBER", "index": 19, "name": "ROUND_NUMBER", "comment": "Sequential number identifying a mining round in the Canton network."}, "CONTRACT_ID": {"type": "TEXT", "index": 20, "name": "CONTRACT_ID", "comment": "Unique identifier for the contract being created or exercised in this event."}, "FACT_VALIDATOR_REWARD_ID": {"type": "TEXT", "index": 21, "name": "FACT_VALIDATOR_REWARD_ID", "comment": "Surrogate key generated from event_id"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 22, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 23, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 6044428, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 1655723520, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.gov__fact_validator_rewards"}, "model.canton_models.core__fact_balance_changes": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_BALANCE_CHANGES", "database": "CANTON", "comment": "## Description\nTracks balance changes for parties resulting from transfer operations. Uses LATERAL FLATTEN to extract individual balance changes from the balanceChanges array in transfer event results.\n\n## Key Use Cases\n- Analyzing balance movements for specific parties\n- Understanding holding fee impacts\n- Tracking initial amount changes per party\n- Monitoring amulet price at time of balance changes\n\n## Important Relationships\n- Derived from `silver__events` where exercise_result contains balanceChanges\n- Links to transfer events via `event_id`\n\n## Commonly-used Fields\n- `party`: The party whose balance changed\n- `change_to_initial_amount`: Change to the party's initial amount\n- `change_to_holding_fees_rate`: Change to holding fees rate\n- `amulet_price`: USD price of amulet at time of change\n- `effective_at`: When the balance change occurred", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "CHOICE": {"type": "TEXT", "index": 7, "name": "CHOICE", "comment": "The choice/action/method being executed on a contract. Examples include 'DsoRules_RequestVote', 'AmuletRules_Transfer', 'LockedAmulet_Unlock', etc."}, "ACTING_PARTIES": {"type": "VARIANT", "index": 8, "name": "ACTING_PARTIES", "comment": "Array of party identifiers who are executing this action/choice."}, "PARTY": {"type": "TEXT", "index": 9, "name": "PARTY", "comment": "Party identifier representing a participant in the Canton network. Can be a validator, user, app provider, or other entity."}, "CHANGE_TO_HOLDING_FEES_RATE": {"type": "NUMBER", "index": 10, "name": "CHANGE_TO_HOLDING_FEES_RATE", "comment": "Numeric change to the holding fees rate for a party."}, "CHANGE_TO_INITIAL_AMOUNT": {"type": "NUMBER", "index": 11, "name": "CHANGE_TO_INITIAL_AMOUNT", "comment": "Numeric change to a party's initial amulet amount from a balance change operation."}, "AMULET_PRICE": {"type": "NUMBER", "index": 12, "name": "AMULET_PRICE", "comment": "USD price of one amulet at the time of the event."}, "FACT_BALANCE_CHANGE_ID": {"type": "TEXT", "index": 13, "name": "FACT_BALANCE_CHANGE_ID", "comment": "Surrogate key generated from event_id and party"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 14, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 15, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 77518937, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 6133236224, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.core__fact_balance_changes"}, "model.canton_models.gov__fact_validator_onboarding_events": {"metadata": {"type": "BASE TABLE", "schema": "GOV", "name": "FACT_VALIDATOR_ONBOARDING_EVENTS", "database": "CANTON", "comment": "## Description\nTracks successful validator onboarding events for both regular validators (DsoRules_OnboardValidator) and super validators (DsoRules_ConfirmSvOnboarding). Represents the final confirmation step in validator onboarding.\n\n## Key Use Cases\n- Monitoring successful validator onboardings\n- Distinguishing between validator and super validator onboardings\n- Tracking validator party identifiers and names\n- Analyzing onboarding timing and actors\n\n## Important Relationships\n- Final step after `gov__fact_validator_onboarding_requests`\n- Links to `gov__fact_validator_offboarding_events` for complete lifecycle\n- Core table in `gov__ez_validator_onboarding_lifecycle` comprehensive view\n\n## Commonly-used Fields\n- `onboarding_type`: 'validator' or 'super_validator'\n- `validator_party`: Party ID of the onboarded validator\n- `validator_name`: Name of the validator\n- `sv_party`: Party ID if onboarding as super validator\n- `sv_onboarding_confirmed`: Contract ID from SV onboarding\n- `new_dso_rules_contract_id`: Updated DSO rules contract", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "CHOICE": {"type": "TEXT", "index": 7, "name": "CHOICE", "comment": "The choice/action/method being executed on a contract. Examples include 'DsoRules_RequestVote', 'AmuletRules_Transfer', 'LockedAmulet_Unlock', etc."}, "ONBOARDING_TYPE": {"type": "TEXT", "index": 8, "name": "ONBOARDING_TYPE", "comment": "Type of onboarding: 'validator' for regular validators or 'super_validator' for super validators."}, "ACTING_PARTIES": {"type": "VARIANT", "index": 9, "name": "ACTING_PARTIES", "comment": "Array of party identifiers who are executing this action/choice."}, "CHILD_EVENT_IDS": {"type": "VARIANT", "index": 10, "name": "CHILD_EVENT_IDS", "comment": ""}, "CONSUMING": {"type": "BOOLEAN", "index": 11, "name": "CONSUMING", "comment": ""}, "VALIDATOR_PARTY": {"type": "TEXT", "index": 12, "name": "VALIDATOR_PARTY", "comment": "Party identifier for a validator."}, "VALIDATOR_NAME": {"type": "TEXT", "index": 13, "name": "VALIDATOR_NAME", "comment": "Human-readable name for a validator."}, "CONTACT_POINT": {"type": "TEXT", "index": 14, "name": "CONTACT_POINT", "comment": ""}, "SPONSOR": {"type": "TEXT", "index": 15, "name": "SPONSOR", "comment": ""}, "VERSION": {"type": "TEXT", "index": 16, "name": "VERSION", "comment": ""}, "VALIDATOR_LICENSE": {"type": "TEXT", "index": 17, "name": "VALIDATOR_LICENSE", "comment": ""}, "SV_PARTICIPANT_ID": {"type": "TEXT", "index": 18, "name": "SV_PARTICIPANT_ID", "comment": ""}, "SV_PARTY": {"type": "TEXT", "index": 19, "name": "SV_PARTY", "comment": "Party identifier specifically for a super validator."}, "SV_NAME": {"type": "TEXT", "index": 20, "name": "SV_NAME", "comment": ""}, "SV_REWARD_WEIGHT": {"type": "NUMBER", "index": 21, "name": "SV_REWARD_WEIGHT", "comment": ""}, "SV_ONBOARDING_REASON": {"type": "TEXT", "index": 22, "name": "SV_ONBOARDING_REASON", "comment": ""}, "SV_ONBOARDING_CONFIRMED": {"type": "TEXT", "index": 23, "name": "SV_ONBOARDING_CONFIRMED", "comment": "Contract ID confirming super validator onboarding."}, "EVENT_TYPE": {"type": "TEXT", "index": 24, "name": "EVENT_TYPE", "comment": ""}, "CONTRACT_ID": {"type": "TEXT", "index": 25, "name": "CONTRACT_ID", "comment": "Unique identifier for the contract being created or exercised in this event."}, "PACKAGE_NAME": {"type": "TEXT", "index": 26, "name": "PACKAGE_NAME", "comment": ""}, "TEMPLATE_ID": {"type": "TEXT", "index": 27, "name": "TEMPLATE_ID", "comment": ""}, "INTERFACE_ID": {"type": "TEXT", "index": 28, "name": "INTERFACE_ID", "comment": ""}, "EVENT_JSON": {"type": "VARIANT", "index": 29, "name": "EVENT_JSON", "comment": ""}, "FACT_VALIDATOR_ONBOARDING_EVENT_ID": {"type": "TEXT", "index": 30, "name": "FACT_VALIDATOR_ONBOARDING_EVENT_ID", "comment": "Surrogate key generated from event_id"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 31, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 32, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 611, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 606208, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.gov__fact_validator_onboarding_events"}, "model.canton_models.core__fact_events": {"metadata": {"type": "VIEW", "schema": "CORE", "name": "FACT_EVENTS", "database": "CANTON", "comment": "## Description\nCore fact table exposing all Canton events from the blockchain with pre-extracted fields for easy analysis. This is the most granular event-level table and serves as the foundation for understanding all Canton blockchain activity.\n\n## Key Use Cases\n- Analyzing complete event history and patterns\n- Joining to specialized fact tables for detailed analysis\n- Exploring contract lifecycle (creation, exercise, archival)\n- Understanding party interactions through acting_parties, signatories, and observers\n\n## Important Relationships\n- Source for all other event-based fact tables\n- Joins to `core__fact_updates` via `update_id`\n- Can be filtered by `choice` to find specific action types\n- Can be filtered by `template_id` to find specific contract types\n\n## Commonly-used Fields\n- `event_id`: Unique identifier for the event\n- `event_index`: Ordering of events within an update\n- `choice`: The action/method being executed (for exercised events)\n- `event_type`: created_event or exercised_event\n- `effective_at`: When the event occurred\n- `contract_id`: The contract being created or exercised\n- `template_id`: The contract template type", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "IS_ROOT_EVENT": {"type": "BOOLEAN", "index": 7, "name": "IS_ROOT_EVENT", "comment": "Boolean indicating whether this is a top-level event in the update (as opposed to a child event triggered by a parent event)."}, "EVENT_TYPE": {"type": "TEXT", "index": 8, "name": "EVENT_TYPE", "comment": "Type of event: 'created_event' for contract creation or 'exercised_event' for method execution on existing contracts."}, "CHOICE": {"type": "TEXT", "index": 9, "name": "CHOICE", "comment": "The choice/action/method being executed on a contract. Examples include 'DsoRules_RequestVote', 'AmuletRules_Transfer', 'LockedAmulet_Unlock', etc."}, "CONSUMING": {"type": "BOOLEAN", "index": 10, "name": "CONSUMING", "comment": "Boolean indicating whether this action consumes/archives the contract."}, "CONTRACT_ID": {"type": "TEXT", "index": 11, "name": "CONTRACT_ID", "comment": "Unique identifier for the contract being created or exercised in this event."}, "TEMPLATE_ID": {"type": "TEXT", "index": 12, "name": "TEMPLATE_ID", "comment": "The template/type of the contract, including package information. Format: 'package_id:ModuleName:ContractType'"}, "PACKAGE_NAME": {"type": "TEXT", "index": 13, "name": "PACKAGE_NAME", "comment": "The Canton package name containing the contract template."}, "INTERFACE_ID": {"type": "TEXT", "index": 14, "name": "INTERFACE_ID", "comment": "Identifier for a Canton interface implemented by a contract."}, "ACTING_PARTIES": {"type": "VARIANT", "index": 15, "name": "ACTING_PARTIES", "comment": "Array of party identifiers who are executing this action/choice."}, "SIGNATORIES": {"type": "VARIANT", "index": 16, "name": "SIGNATORIES", "comment": "Array of party identifiers who are signatories to the contract."}, "OBSERVERS": {"type": "VARIANT", "index": 17, "name": "OBSERVERS", "comment": "Array of party identifiers who can observe the contract but are not signatories."}, "CHILD_EVENT_IDS": {"type": "VARIANT", "index": 18, "name": "CHILD_EVENT_IDS", "comment": "Array of event IDs for events that were triggered by this event."}, "CREATED_AT": {"type": "TIMESTAMP_NTZ", "index": 19, "name": "CREATED_AT", "comment": "Timestamp when the contract was created."}, "CHOICE_ARGUMENT": {"type": "VARIANT", "index": 20, "name": "CHOICE_ARGUMENT", "comment": "JSON object containing the arguments passed to a choice/action."}, "EXERCISE_RESULT": {"type": "VARIANT", "index": 21, "name": "EXERCISE_RESULT", "comment": "JSON object containing the full result of exercising a choice on a contract."}, "CREATE_ARGUMENTS": {"type": "VARIANT", "index": 22, "name": "CREATE_ARGUMENTS", "comment": "JSON object containing the arguments used to create a contract."}, "EVENT_JSON": {"type": "VARIANT", "index": 23, "name": "EVENT_JSON", "comment": "Full JSON object containing all event data. Useful for detailed analysis and accessing fields not explicitly extracted."}, "FACT_EVENT_ID": {"type": "TEXT", "index": 24, "name": "FACT_EVENT_ID", "comment": "Surrogate key generated from event_id"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 25, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 26, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.core__fact_events"}, "model.canton_models.silver__events": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "EVENTS", "database": "CANTON", "comment": null, "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": null}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": null}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": null}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": null}, "ROOT_EVENT_IDS": {"type": "VARIANT", "index": 5, "name": "ROOT_EVENT_IDS", "comment": null}, "IS_ROOT_EVENT": {"type": "BOOLEAN", "index": 6, "name": "IS_ROOT_EVENT", "comment": null}, "EVENT_ID": {"type": "TEXT", "index": 7, "name": "EVENT_ID", "comment": null}, "EVENT_JSON": {"type": "VARIANT", "index": 9, "name": "EVENT_JSON", "comment": null}, "CHOICE": {"type": "TEXT", "index": 10, "name": "CHOICE", "comment": null}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 11, "name": "_INSERTED_TIMESTAMP", "comment": null}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 12, "name": "INSERTED_TIMESTAMP", "comment": null}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 13, "name": "MODIFIED_TIMESTAMP", "comment": null}, "_INVOCATION_ID": {"type": "TEXT", "index": 14, "name": "_INVOCATION_ID", "comment": null}, "EVENT_INDEX": {"type": "NUMBER", "index": 16, "name": "EVENT_INDEX", "comment": null}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 511376394, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-10-31 21:18UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 134840827904, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE, migration_id)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.silver__events"}, "model.canton_models.core__fact_amulet_locks": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_AMULET_LOCKS", "database": "CANTON", "comment": "## Description\nTracks when amulets are locked/staked by creating LockedAmulet contracts. Locking amulets allows holders to stake their tokens, typically for validator operations or other protocol functions.\n\n## Key Use Cases\n- Monitoring staking activity and locked amounts\n- Tracking lock expiration times\n- Analyzing lock holder patterns\n- Understanding rate per round for locked amulets\n\n## Important Relationships\n- Links to `core__fact_amulet_unlocks` via amulet_owner and contract_id patterns\n- Related to validator operations through lock_holders\n\n## Commonly-used Fields\n- `locked_amount`: Initial amount of amulet being locked\n- `amulet_owner`: The party who owns the locked amulet\n- `lock_expires_at`: When the lock expires\n- `lock_holders`: Parties who hold the lock\n- `rate_per_round`: Rate of fee accrual per round\n- `amount_created_at_round`: Round when the amount was created", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "LOCKED_AMOUNT": {"type": "NUMBER", "index": 7, "name": "LOCKED_AMOUNT", "comment": "Initial amount of amulet being locked/staked."}, "AMOUNT_CREATED_AT_ROUND": {"type": "NUMBER", "index": 8, "name": "AMOUNT_CREATED_AT_ROUND", "comment": "Round number when an amulet amount was originally created."}, "RATE_PER_ROUND": {"type": "NUMBER", "index": 9, "name": "RATE_PER_ROUND", "comment": "Rate at which fees or rewards accrue per mining round."}, "AMULET_OWNER": {"type": "TEXT", "index": 10, "name": "AMULET_OWNER", "comment": "Party identifier for the owner of an amulet (locked or unlocked)."}, "LOCK_DETAILS": {"type": "VARIANT", "index": 11, "name": "LOCK_DETAILS", "comment": "JSON object containing full lock configuration"}, "LOCK_EXPIRES_AT": {"type": "TIMESTAMP_NTZ", "index": 12, "name": "LOCK_EXPIRES_AT", "comment": "Timestamp when a lock expires and the amulet can be unlocked."}, "LOCK_HOLDERS": {"type": "VARIANT", "index": 13, "name": "LOCK_HOLDERS", "comment": "Array of party identifiers who hold rights to a locked amulet."}, "LOCKED_AMULET_CONTRACT_ID": {"type": "TEXT", "index": 14, "name": "LOCKED_AMULET_CONTRACT_ID", "comment": "Contract ID for a LockedAmulet contract."}, "CREATED_AT": {"type": "TIMESTAMP_NTZ", "index": 15, "name": "CREATED_AT", "comment": "Timestamp when the contract was created."}, "SIGNATORIES": {"type": "VARIANT", "index": 16, "name": "SIGNATORIES", "comment": "Array of party identifiers who are signatories to the contract."}, "OBSERVERS": {"type": "VARIANT", "index": 17, "name": "OBSERVERS", "comment": "Array of party identifiers who can observe the contract but are not signatories."}, "PACKAGE_NAME": {"type": "TEXT", "index": 18, "name": "PACKAGE_NAME", "comment": "The Canton package name containing the contract template."}, "TEMPLATE_ID": {"type": "TEXT", "index": 19, "name": "TEMPLATE_ID", "comment": "The template/type of the contract, including package information. Format: 'package_id:ModuleName:ContractType'"}, "FACT_LOCK_ID": {"type": "TEXT", "index": 20, "name": "FACT_LOCK_ID", "comment": "Surrogate key generated from event_id"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 21, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 22, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 15105527, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 2917121536, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.core__fact_amulet_locks"}, "model.canton_models.gov__fact_validator_activity": {"metadata": {"type": "BASE TABLE", "schema": "GOV", "name": "FACT_VALIDATOR_ACTIVITY", "database": "CANTON", "comment": "## Description\nTracks validator liveness and activity reporting events. Captures both super validator activity reports (ValidatorLicense_ReportActive) and regular validator liveness activity (ValidatorLicense_RecordValidatorLivenessActivity).\n\n## Key Use Cases\n- Monitoring validator liveness and activity\n- Distinguishing between super validator and regular validator activity\n- Tracking activity patterns and frequency\n- Analyzing validator performance and participation\n\n## Important Relationships\n- Links to validator onboarding tables via validator parties\n- Activity data used for reward calculations\n- Related to validator reward distribution\n\n## Commonly-used Fields\n- `validator_type`: 'super_validator' or 'validator'\n- `round_number`: Mining round when activity occurred\n- `validator_party`: Party reporting activity\n- `effective_at`: When activity was reported", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "CHOICE": {"type": "TEXT", "index": 7, "name": "CHOICE", "comment": "The choice/action/method being executed on a contract. Examples include 'DsoRules_RequestVote', 'AmuletRules_Transfer', 'LockedAmulet_Unlock', etc."}, "VALIDATOR_PARTY": {"type": "VARIANT", "index": 8, "name": "VALIDATOR_PARTY", "comment": "Party identifier reporting activity"}, "VALIDATOR_TYPE": {"type": "TEXT", "index": 9, "name": "VALIDATOR_TYPE", "comment": "Type of validator: 'super_validator' or 'validator'."}, "OPEN_ROUND_CID": {"type": "TEXT", "index": 10, "name": "OPEN_ROUND_CID", "comment": ""}, "CLOSED_ROUND_CID": {"type": "TEXT", "index": 11, "name": "CLOSED_ROUND_CID", "comment": ""}, "COUPON_CID": {"type": "TEXT", "index": 12, "name": "COUPON_CID", "comment": ""}, "LICENSE_CID": {"type": "TEXT", "index": 13, "name": "LICENSE_CID", "comment": ""}, "CONTRACT_ID": {"type": "TEXT", "index": 14, "name": "CONTRACT_ID", "comment": "Unique identifier for the contract being created or exercised in this event."}, "TEMPLATE_ID": {"type": "TEXT", "index": 15, "name": "TEMPLATE_ID", "comment": ""}, "EVENT_JSON": {"type": "VARIANT", "index": 16, "name": "EVENT_JSON", "comment": ""}, "FACT_VALIDATOR_ACTIVITY_ID": {"type": "TEXT", "index": 17, "name": "FACT_VALIDATOR_ACTIVITY_ID", "comment": "Surrogate key generated from event_id"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 18, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 19, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 8865399, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 5330339328, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.gov__fact_validator_activity"}, "model.canton_models.core__fact_app_rewards": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_APP_REWARDS", "database": "CANTON", "comment": "## Description\nTracks app reward coupon expirations when the DSO expires app reward coupons. These events occur when reward coupons reach their expiration and are processed by the DSO.\n\n## Key Use Cases\n- Monitoring app reward expiration patterns\n- Analyzing reward amounts being expired\n- Tracking which closed rounds trigger expirations\n- Understanding featured vs unfeatured app reward differences\n\n## Important Relationships\n- Links to closed rounds via `closed_round_cid`\n- Related to `core__fact_app_reward_coupons` (creation of coupons)\n\n## Commonly-used Fields\n- `reward_amount`: Amount of the expired reward\n- `is_featured_app`: Whether this was for a featured app\n- `closed_round_cid`: Reference to the closed mining round\n- `contract_id`: The app reward coupon contract being expired", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "CHOICE": {"type": "TEXT", "index": 7, "name": "CHOICE", "comment": "The choice/action/method being executed on a contract. Examples include 'DsoRules_RequestVote', 'AmuletRules_Transfer', 'LockedAmulet_Unlock', etc."}, "ACTING_PARTIES": {"type": "VARIANT", "index": 8, "name": "ACTING_PARTIES", "comment": "Array of party identifiers who are executing this action/choice."}, "CLOSED_ROUND_CID": {"type": "TEXT", "index": 9, "name": "CLOSED_ROUND_CID", "comment": "Contract ID reference to a closed mining round."}, "REWARD_AMOUNT": {"type": "NUMBER", "index": 10, "name": "REWARD_AMOUNT", "comment": "Amount of reward (in amulets) being distributed or processed."}, "IS_FEATURED_APP": {"type": "BOOLEAN", "index": 11, "name": "IS_FEATURED_APP", "comment": "Boolean indicating whether an application has featured status, which typically grants higher reward rates."}, "CONTRACT_ID": {"type": "TEXT", "index": 12, "name": "CONTRACT_ID", "comment": "Unique identifier for the contract being created or exercised in this event."}, "TEMPLATE_ID": {"type": "TEXT", "index": 13, "name": "TEMPLATE_ID", "comment": "The template/type of the contract, including package information. Format: 'package_id:ModuleName:ContractType'"}, "FACT_APP_REWARD_ID": {"type": "TEXT", "index": 14, "name": "FACT_APP_REWARD_ID", "comment": "Surrogate key generated from event_id"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 15, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 16, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 162483, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 18546688, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.core__fact_app_rewards"}, "model.canton_models.core__ez_amulet_lock_lifecycle": {"metadata": {"type": "VIEW", "schema": "CORE", "name": "EZ_AMULET_LOCK_LIFECYCLE", "database": "CANTON", "comment": "## Description\nComprehensive EZ view showing the complete lifecycle of locked amulets from initial lock through unlock or expiration. Joins lock and unlock events to provide a full picture of staking activity including durations, status, and outcomes.\n\n## Key Use Cases\n- Analyzing complete amulet locking/staking patterns\n- Calculating average lock durations\n- Identifying locks that expired vs were actively unlocked\n- Tracking which locks were unlocked after expiry\n- Understanding staking behavior and timing\n- Monitoring currently active locks\n\n## Important Relationships\n- Combines `core__fact_amulet_locks` and `core__fact_amulet_unlocks` via locked_amulet_contract_id\n- Links to validators and staking through amulet_owner and lock_holders\n\n## Commonly-used Fields\n- `locked_amulet_contract_id`: Unique identifier for the locked amulet\n- `amulet_owner`: Party who owns the locked amulet\n- `lock_status`: Current status (locked, unlocked, or expired)\n- `locked_at`: When the lock was created\n- `unlocked_at`: When it was unlocked (NULL if still locked)\n- `locked_amount`: Amount locked\n- `days_locked_before_unlock`: Duration for completed locks\n- `days_locked_current`: Duration for active locks\n- `was_unlocked_after_expiry`: Whether unlock happened after expiration time", "owner": "DBT_CLOUD_CANTON"}, "columns": {"LOCKED_AMULET_CONTRACT_ID": {"type": "TEXT", "index": 1, "name": "LOCKED_AMULET_CONTRACT_ID", "comment": "Contract ID for a LockedAmulet contract."}, "AMULET_OWNER": {"type": "TEXT", "index": 2, "name": "AMULET_OWNER", "comment": "Party identifier for the owner of an amulet (locked or unlocked)."}, "LOCK_HOLDERS": {"type": "VARIANT", "index": 3, "name": "LOCK_HOLDERS", "comment": "Array of party identifiers who hold rights to a locked amulet."}, "LOCKED_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "LOCKED_AT", "comment": "Timestamp when the amulet was locked"}, "LOCK_EXPIRES_AT": {"type": "TIMESTAMP_NTZ", "index": 5, "name": "LOCK_EXPIRES_AT", "comment": "Timestamp when a lock expires and the amulet can be unlocked."}, "UNLOCKED_AT": {"type": "TIMESTAMP_NTZ", "index": 6, "name": "UNLOCKED_AT", "comment": "Timestamp when the amulet was unlocked (NULL if still locked)"}, "LOCKED_AMOUNT": {"type": "NUMBER", "index": 7, "name": "LOCKED_AMOUNT", "comment": "Initial amount of amulet being locked/staked."}, "UNLOCKED_AMOUNT": {"type": "NUMBER", "index": 8, "name": "UNLOCKED_AMOUNT", "comment": "Amount of amulet being unlocked from a locked state."}, "AMOUNT_CREATED_AT_ROUND": {"type": "NUMBER", "index": 9, "name": "AMOUNT_CREATED_AT_ROUND", "comment": "Round number when an amulet amount was originally created."}, "RATE_PER_ROUND": {"type": "NUMBER", "index": 10, "name": "RATE_PER_ROUND", "comment": "Rate at which fees or rewards accrue per mining round."}, "UNLOCK_ACTION": {"type": "TEXT", "index": 11, "name": "UNLOCK_ACTION", "comment": "Type of unlock action: 'unlock' for normal unlock or 'expire_lock' for lock expiration."}, "UNLOCK_REASON": {"type": "TEXT", "index": 12, "name": "UNLOCK_REASON", "comment": "Metadata describing the reason for an unlock operation."}, "TX_KIND": {"type": "TEXT", "index": 13, "name": "TX_KIND", "comment": "Transaction kind metadata describing the type of transaction."}, "UNLOCK_AMULET_PRICE": {"type": "NUMBER", "index": 14, "name": "UNLOCK_AMULET_PRICE", "comment": "USD price of amulet at time of unlock"}, "UNLOCK_ROUND_NUMBER": {"type": "NUMBER", "index": 15, "name": "UNLOCK_ROUND_NUMBER", "comment": "Round number when unlock occurred"}, "CREATED_AMULET_CONTRACT_ID": {"type": "TEXT", "index": 16, "name": "CREATED_AMULET_CONTRACT_ID", "comment": "Contract ID for a newly created Amulet contract (typically after unlock)."}, "LOCK_EVENT_ID": {"type": "TEXT", "index": 17, "name": "LOCK_EVENT_ID", "comment": "Event ID of the lock creation event"}, "UNLOCK_EVENT_ID": {"type": "TEXT", "index": 18, "name": "UNLOCK_EVENT_ID", "comment": "Event ID of the unlock event (NULL if still locked)"}, "LOCK_STATUS": {"type": "TEXT", "index": 19, "name": "LOCK_STATUS", "comment": "Current status: locked, unlocked, or expired"}, "DAYS_LOCKED_BEFORE_UNLOCK": {"type": "NUMBER", "index": 20, "name": "DAYS_LOCKED_BEFORE_UNLOCK", "comment": "Number of days amulet was locked before being unlocked"}, "DAYS_LOCKED_CURRENT": {"type": "NUMBER", "index": 21, "name": "DAYS_LOCKED_CURRENT", "comment": "Number of days amulet has been locked (for currently locked amulets)"}, "WAS_UNLOCKED_AFTER_EXPIRY": {"type": "BOOLEAN", "index": 22, "name": "WAS_UNLOCKED_AFTER_EXPIRY", "comment": "Boolean indicating if unlock occurred after the lock expiration time"}, "MOST_RECENT_ACTIVITY": {"type": "TIMESTAMP_NTZ", "index": 23, "name": "MOST_RECENT_ACTIVITY", "comment": "Most recent timestamp of activity (unlock if unlocked, otherwise lock time)"}, "CREATED_AT": {"type": "TIMESTAMP_NTZ", "index": 24, "name": "CREATED_AT", "comment": "Timestamp when the contract was created."}, "SIGNATORIES": {"type": "VARIANT", "index": 25, "name": "SIGNATORIES", "comment": "Array of party identifiers who are signatories to the contract."}, "OBSERVERS": {"type": "VARIANT", "index": 26, "name": "OBSERVERS", "comment": "Array of party identifiers who can observe the contract but are not signatories."}, "EZ_AMULET_LOCK_LIFECYCLE_ID": {"type": "TEXT", "index": 27, "name": "EZ_AMULET_LOCK_LIFECYCLE_ID", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 28, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 29, "name": "MODIFIED_TIMESTAMP", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.core__ez_amulet_lock_lifecycle"}, "model.canton_models.gov__fact_validator_onboarding_request_expirations": {"metadata": {"type": "BASE TABLE", "schema": "GOV", "name": "FACT_VALIDATOR_ONBOARDING_REQUEST_EXPIRATIONS", "database": "CANTON", "comment": "## Description\nTracks onboarding request expirations through both DSO-initiated expiration (DsoRules_ExpireSvOnboardingRequest) and contract consumption (SvOnboardingRequest_Expire). Handles parent-child event relationships.\n\n## Key Use Cases\n- Monitoring expired onboarding requests\n- Understanding expiration types (DSO-initiated vs contract-consumed)\n- Tracking which requests didn't complete onboarding\n- Analyzing expiration timing and patterns\n\n## Important Relationships\n- Links to `gov__fact_validator_onboarding_requests` via contract IDs\n- Part of `gov__ez_validator_onboarding_lifecycle` for incomplete onboardings\n\n## Commonly-used Fields\n- `expiration_type`: 'dso_initiated' or 'contract_consumed'\n- `expired_request_cid`: Contract ID of the expired request\n- `reason_url`: URL explaining expiration (DSO-initiated only)\n- `reason_body`: Text description of expiration (DSO-initiated only)\n- `effective_at`: When expiration occurred", "owner": "DBT_CLOUD_CANTON"}, "columns": {"UPDATE_ID": {"type": "TEXT", "index": 1, "name": "UPDATE_ID", "comment": "Unique identifier for the Canton update/transaction. An update contains one or more events and represents an atomic change to the blockchain state."}, "MIGRATION_ID": {"type": "NUMBER", "index": 2, "name": "MIGRATION_ID", "comment": "Canton migration identifier. Used to track different phases or migrations in the Canton network's evolution."}, "RECORD_TIME": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "RECORD_TIME", "comment": "Timestamp when the update was recorded in the system."}, "EFFECTIVE_AT": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "EFFECTIVE_AT", "comment": "Timestamp when the event or update became effective on the blockchain. This is the canonical time for ordering and analyzing blockchain events."}, "EVENT_ID": {"type": "TEXT", "index": 5, "name": "EVENT_ID", "comment": "Unique identifier for the event within the Canton blockchain."}, "EVENT_INDEX": {"type": "NUMBER", "index": 6, "name": "EVENT_INDEX", "comment": "Ordering index of events within an update. Events within the same update are sequentially numbered starting from 0."}, "CHOICE": {"type": "TEXT", "index": 7, "name": "CHOICE", "comment": "The choice/action/method being executed on a contract. Examples include 'DsoRules_RequestVote', 'AmuletRules_Transfer', 'LockedAmulet_Unlock', etc."}, "EXPIRATION_TYPE": {"type": "TEXT", "index": 8, "name": "EXPIRATION_TYPE", "comment": "Type of expiration: 'dso_initiated' for DSO-triggered expiration or 'contract_consumed' for automatic contract expiration."}, "ACTING_PARTIES": {"type": "VARIANT", "index": 9, "name": "ACTING_PARTIES", "comment": "Array of party identifiers who are executing this action/choice."}, "CHILD_EVENT_IDS": {"type": "VARIANT", "index": 10, "name": "CHILD_EVENT_IDS", "comment": ""}, "CONSUMING": {"type": "BOOLEAN", "index": 11, "name": "CONSUMING", "comment": ""}, "EXPIRED_REQUEST_CID": {"type": "TEXT", "index": 12, "name": "EXPIRED_REQUEST_CID", "comment": "Contract ID of an expired onboarding request."}, "SV_PARTY": {"type": "TEXT", "index": 13, "name": "SV_PARTY", "comment": ""}, "ONBOARDING_REQUEST_CONTRACT_ID": {"type": "TEXT", "index": 14, "name": "ONBOARDING_REQUEST_CONTRACT_ID", "comment": ""}, "EXERCISE_RESULT": {"type": "TEXT", "index": 15, "name": "EXERCISE_RESULT", "comment": ""}, "EVENT_TYPE": {"type": "TEXT", "index": 16, "name": "EVENT_TYPE", "comment": ""}, "CONTRACT_ID": {"type": "TEXT", "index": 17, "name": "CONTRACT_ID", "comment": "Unique identifier for the contract being created or exercised in this event."}, "PACKAGE_NAME": {"type": "TEXT", "index": 18, "name": "PACKAGE_NAME", "comment": ""}, "TEMPLATE_ID": {"type": "TEXT", "index": 19, "name": "TEMPLATE_ID", "comment": ""}, "INTERFACE_ID": {"type": "TEXT", "index": 20, "name": "INTERFACE_ID", "comment": ""}, "EVENT_JSON": {"type": "VARIANT", "index": 21, "name": "EVENT_JSON", "comment": ""}, "FACT_SV_ONBOARDING_EXPIRATION_ID": {"type": "TEXT", "index": 22, "name": "FACT_SV_ONBOARDING_EXPIRATION_ID", "comment": "Surrogate key generated from event_id"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 23, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into this table (Snowflake SYSDATE)."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 24, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in this table (Snowflake SYSDATE)."}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 894, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:05UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 549888, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(effective_at::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.canton_models.gov__fact_validator_onboarding_request_expirations"}}, "sources": {"source.livequery_models.crosschain.dim_evm_event_abis": {"metadata": {"type": "VIEW", "schema": "CORE", "name": "DIM_EVM_EVENT_ABIS", "database": "CROSSCHAIN_DEV", "comment": "This table contains the individual event abis for each all contracts that we have ABIs for. Proxies are rolled up to their implementation.", "owner": "INTERNAL_DEV"}, "columns": {"BLOCKCHAIN": {"type": "TEXT", "index": 1, "name": "BLOCKCHAIN", "comment": "The blockchain that the event abi is for."}, "PARENT_CONTRACT_ADDRESS": {"type": "TEXT", "index": 2, "name": "PARENT_CONTRACT_ADDRESS", "comment": "The address of the contract that the event abi is for."}, "EVENT_NAME": {"type": "TEXT", "index": 3, "name": "EVENT_NAME", "comment": "The name of the event."}, "ABI": {"type": "VARIANT", "index": 4, "name": "ABI", "comment": "The abi of the event."}, "SIMPLE_EVENT_NAME": {"type": "TEXT", "index": 5, "name": "SIMPLE_EVENT_NAME", "comment": "The name of the event along with its parameters."}, "EVENT_SIGNATURE": {"type": "TEXT", "index": 6, "name": "EVENT_SIGNATURE", "comment": "The keccak256 signature of the simple event name. This can be used to filter for events in the logs table on topics[0]."}, "START_BLOCK": {"type": "NUMBER", "index": 7, "name": "START_BLOCK", "comment": "The block number of the creation of the contract containing the event. This could be from a proxy or an implementation."}, "END_BLOCK": {"type": "NUMBER", "index": 8, "name": "END_BLOCK", "comment": "The block number before a similar event was created in the contract. This could be from a proxy or an implementation."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 9, "name": "INSERTED_TIMESTAMP", "comment": "The utc timestamp at which the row was inserted into the table."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 10, "name": "MODIFIED_TIMESTAMP", "comment": "The utc timestamp at which the row was last modified."}, "DIM_EVM_EVENT_ABIS_ID": {"type": "TEXT", "index": 11, "name": "DIM_EVM_EVENT_ABIS_ID", "comment": "The unique identifier for each row in the table."}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.livequery_models.crosschain.dim_evm_event_abis"}, "source.livequery_models.crosschain.dim_date_hours": {"metadata": {"type": "VIEW", "schema": "CORE", "name": "DIM_DATE_HOURS", "database": "CROSSCHAIN_DEV", "comment": "Hold rows for each hour from 2017 to current timestamp (UTC)", "owner": "INTERNAL_DEV"}, "columns": {"DATE_HOUR": {"type": "TIMESTAMP_NTZ", "index": 1, "name": "DATE_HOUR", "comment": "Specific hour of a given date"}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.livequery_models.crosschain.dim_date_hours"}, "source.livequery_models.crosschain.dim_contracts": {"metadata": {"type": "VIEW", "schema": "CORE", "name": "DIM_CONTRACTS", "database": "CROSSCHAIN_DEV", "comment": "This table contains contract details for contracts deployed on the Ethereum, Optimism, Polygon, BSC, Arbitrum, Avalanche, Osmosis and Solana blockchains.", "owner": "INTERNAL_DEV"}, "columns": {"ADDRESS": {"type": "TEXT", "index": 1, "name": "ADDRESS", "comment": "The unique address of the deployed contract."}, "SYMBOL": {"type": "TEXT", "index": 2, "name": "SYMBOL", "comment": "The symbol used to represent this contract. Please note this is not necessarily unique."}, "NAME": {"type": "TEXT", "index": 3, "name": "NAME", "comment": "The name of the deployed contract. Please note this is not necessarily unique."}, "DECIMALS": {"type": "NUMBER", "index": 4, "name": "DECIMALS", "comment": "The number of decimal places this contract needs adjusted where token values exist."}, "CREATED_BLOCK_NUMBER": {"type": "NUMBER", "index": 5, "name": "CREATED_BLOCK_NUMBER", "comment": ""}, "CREATED_BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 6, "name": "CREATED_BLOCK_TIMESTAMP", "comment": ""}, "CREATED_TX_HASH": {"type": "TEXT", "index": 7, "name": "CREATED_TX_HASH", "comment": ""}, "CREATOR_ADDRESS": {"type": "TEXT", "index": 8, "name": "CREATOR_ADDRESS", "comment": ""}, "BLOCKCHAIN": {"type": "TEXT", "index": 9, "name": "BLOCKCHAIN", "comment": "The corresponding blockchain for contract details."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 10, "name": "INSERTED_TIMESTAMP", "comment": "The utc timestamp at which the row was inserted into the table."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 11, "name": "MODIFIED_TIMESTAMP", "comment": "The utc timestamp at which the row was last modified."}, "DIM_CONTRACTS_ID": {"type": "TEXT", "index": 12, "name": "DIM_CONTRACTS_ID", "comment": "The unique identifier for each row in the table."}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.livequery_models.crosschain.dim_contracts"}, "source.livequery_models.ethereum_core.fact_event_logs": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_EVENT_LOGS", "database": "ETHEREUM_DEV", "comment": "## What\n\nThis table contains raw event logs emitted by smart contracts during transaction execution. Each row represents a single event with its topics and data. Events are the primary mechanism for smart contracts to communicate state changes and must be explicitly emitted in contract code.\n\n## Key Use Cases\n\n- Tracking raw blockchain events before decoding\n- Filtering events by signature (topic_0) for specific event types\n- Analyzing contract activity patterns and event frequencies\n- Building custom event decoders for unsupported contracts\n- Monitoring specific addresses via indexed parameters\n\n## Important Relationships\n\n- **Join with ez_decoded_event_logs**: Use `tx_hash` and `event_index` for simplified decoded data\n- **Join with fact_transactions**: Use `tx_hash` for transaction context\n- **Join with dim_contracts**: Use `contract_address` for contract metadata\n\n## Commonly-used Fields\n\n- `topic_0`: Event signature hash for filtering event types\n- `contract_address`: Smart contract that emitted the event\n- `topics`: Array of indexed parameters (max 4)\n- `data`: Hex-encoded non-indexed parameters\n- `event_index`: Sequential position within transaction\n- `tx_hash`: Transaction containing this event\n\n## Sample queries\n\n```sql\n-- Find all ERC-20 Transfer events in last 24 hours\nSELECT \n    block_timestamp,\n    tx_hash,\n    contract_address,\n    topics[1] AS from_address_padded,\n    topics[2] AS to_address_padded,\n    data AS amount_hex,\n    event_index\nFROM <blockchain_name>.core.fact_event_logs\nWHERE topic_0 = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n    AND ARRAY_SIZE(topics) = 3  -- ERC-20 has 3 topics\n    AND block_timestamp >= CURRENT_DATE - 1\nLIMIT 100;\n\n-- Most active contracts by event count\nSELECT \n    contract_address,\n    COUNT(*) AS event_count,\n    COUNT(DISTINCT tx_hash) AS unique_txs,\n    COUNT(DISTINCT topic_0) AS unique_event_types,\n    MIN(block_timestamp) AS first_seen,\n    MAX(block_timestamp) AS last_seen\nFROM <blockchain_name>.core.fact_event_logs\nWHERE block_timestamp >= CURRENT_DATE - 7\nGROUP BY 1\nORDER BY 2 DESC\nLIMIT 50;\n\n-- Event patterns within transactions\nSELECT \n    tx_hash,\n    COUNT(*) AS events_in_tx,\n    COUNT(DISTINCT contract_address) AS contracts_touched,\n    ARRAY_AGG(DISTINCT topic_0) AS event_signatures\nFROM <blockchain_name>.core.fact_event_logs\nWHERE block_timestamp >= CURRENT_DATE - 1\nGROUP BY 1\nHAVING COUNT(*) > 10\nORDER BY 2 DESC\nLIMIT 20;\n```", "owner": "INTERNAL_DEV"}, "columns": {"BLOCK_NUMBER": {"type": "NUMBER", "index": 1, "name": "BLOCK_NUMBER", "comment": "Sequential counter representing the position of a block in the blockchain since genesis (block 0).\n\n**Key Facts**:\n- Immutable once finalized\n- Primary ordering mechanism for blockchain data\n- Increments by 1 for each new block\n- Used as a proxy for time in many analyses\n\n**Usage in Queries**:\n```sql\n-- Recent data\nWHERE block_number >= (SELECT MAX(block_number) - 1000 FROM fact_blocks)\n\n-- Historical analysis\nWHERE block_number BETWEEN 15000000 AND 16000000\n\n-- Join across tables\nJOIN <blockchain_name>.core.fact_event_logs USING (block_number)\n```\n\n**Important**: Block numbers are chain-specific. Block 15000000 on Ethereum \u2260 block 15000000 on Polygon."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "UTC timestamp when the block was produced by validators/miners.\n\n**Format**: TIMESTAMP_NTZ (no timezone)\n**Precision**: Second-level accuracy\n**Reliability**:\n- Set by block producer\n- Can have minor variations (\u00b115 seconds)\n- Always increasing (newer blocks = later timestamps)\n\n**Best Practices**:\n```sql\n-- Time-based filtering (most efficient)\nWHERE block_timestamp >= DATEADD('day', -7, CURRENT_TIMESTAMP)\n\n-- Hourly aggregations\nDATE_TRUNC('hour', block_timestamp) AS hour\n\n-- UTC date extraction\nDATE(block_timestamp) AS block_date\n```\n\n**Note**: Use for time-series analysis, but be aware that block production rates vary by chain."}, "TX_HASH": {"type": "TEXT", "index": 3, "name": "TX_HASH", "comment": "Unique 66-character identifier for the transaction.\n\n**Format**: 0x + 64 hexadecimal characters\n\n**Usage**:\n- Primary key for transaction lookups\n- Join key for traces, logs, and token transfers\n- Immutable once confirmed\n\n**Example**: `0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060`"}, "TX_POSITION": {"type": "NUMBER", "index": 4, "name": "TX_POSITION", "comment": "Zero-indexed position of transaction within its block.\n\n**Insights**:\n- Position 0: First transaction in block\n- MEV bots often target early positions\n- Bundle transactions appear consecutively\n- Useful for analyzing transaction ordering"}, "EVENT_INDEX": {"type": "NUMBER", "index": 5, "name": "EVENT_INDEX", "comment": "Zero-based sequential position of the event within a transaction's execution.\n\n**Key Facts**:\n- Starts at 0 for first event\n- Increments across all contracts in transaction\n- Preserves execution order\n- Essential for deterministic event ordering\n\n**Usage Example**:\n```sql\n-- Trace event execution flow\nSELECT \n    event_index,\n    contract_address,\n    topic_0,\n    SUBSTRING(data, 1, 10) AS data_preview\nFROM <blockchain_name>.core.fact_event_logs\nWHERE tx_hash = '0xabc...'\nORDER BY event_index;\n```"}, "CONTRACT_ADDRESS": {"type": "TEXT", "index": 6, "name": "CONTRACT_ADDRESS", "comment": "Smart contract address that emitted this event or received the transaction.\n\n**Key Points**:\n- Always the immediate event emitter for logs\n- May differ from transaction to_address\n- Lowercase normalized format\n- Never NULL for valid events"}, "TOPICS": {"type": "VARIANT", "index": 7, "name": "TOPICS", "comment": "Array containing all indexed parameters of the event.\n\nExample: ['0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', '0x0000000000000000000000001234567890123456789012345678901234567890']"}, "TOPIC_0": {"type": "TEXT", "index": 8, "name": "TOPIC_0", "comment": "Event signature hash - keccak256 of the event declaration.\n\nExample: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'"}, "TOPIC_1": {"type": "TEXT", "index": 9, "name": "TOPIC_1", "comment": "First indexed parameter of the event (if exists).\n\nExample: '0x0000000000000000000000001234567890123456789012345678901234567890'"}, "TOPIC_2": {"type": "TEXT", "index": 10, "name": "TOPIC_2", "comment": "Second indexed parameter of the event (if exists).\n\nExample: '0x000000000000000000000000abcdefabcdefabcdefabcdefabcdefabcdefabcd'"}, "TOPIC_3": {"type": "TEXT", "index": 11, "name": "TOPIC_3", "comment": "Third indexed parameter of the event (if exists).\n\nExample: '0x0000000000000000000000000000000000000000000000000000000000000001'"}, "DATA": {"type": "TEXT", "index": 12, "name": "DATA", "comment": "Hex-encoded non-indexed event parameters.\n\nExample: '0x0000000000000000000000000000000000000000000000000de0b6b3a7640000'"}, "EVENT_REMOVED": {"type": "BOOLEAN", "index": 13, "name": "EVENT_REMOVED", "comment": "Boolean flag indicating if the event was removed due to chain reorganization.\n\nExample: false"}, "ORIGIN_FROM_ADDRESS": {"type": "TEXT", "index": 14, "name": "ORIGIN_FROM_ADDRESS", "comment": "The externally-owned account (EOA) or contract address that initiated the transaction.\n\n**Key Points**:\n- Always 42 characters (0x + 40 hex chars)\n- Lowercase normalized in all tables\n- Cannot be NULL for valid transactions\n- For contract creation: sender of creation transaction\n\n**Common Patterns**:\n- EOA \u2192 EOA: Simple transfer\n- EOA \u2192 Contract: User interaction\n- Contract \u2192 Contract: Internal calls (see fact_traces)\n- Known addresses: Exchange hot wallets, protocol deployers\n\n**Query Examples**:\n```sql\n-- User activity analysis\nSELECT from_address, COUNT(*) as tx_count\nFROM <blockchain_name>.core.fact_transactions\nWHERE block_timestamp >= CURRENT_DATE - 30\nGROUP BY 1\nORDER BY 2 DESC;\n\n-- New user detection\nSELECT DISTINCT from_address\nFROM <blockchain_name>.core.fact_transactions t1\nWHERE NOT EXISTS (\n    SELECT 1 FROM <blockchain_name>.core.fact_transactions t2 \n    WHERE t2.from_address = t1.from_address \n    AND t2.block_number < t1.block_number\n);\n```"}, "ORIGIN_TO_ADDRESS": {"type": "TEXT", "index": 15, "name": "ORIGIN_TO_ADDRESS", "comment": "The destination address for the transaction - either an EOA or contract address.\n\n**Special Cases**:\n- NULL: Contract creation transaction\n- Contract address: Interacting with smart contract\n- EOA address: Simple transfer or receiving funds\n\n**Important Patterns**:\n```sql\n-- Contract deployments\nWHERE to_address IS NULL\n\n-- Popular contracts\nSELECT to_address, COUNT(*) as interactions\nFROM <blockchain_name>.core.fact_transactions\nWHERE to_address IS NOT NULL\nGROUP BY 1\nORDER BY 2 DESC;\n\n-- Direct transfers only\nWHERE to_address NOT IN (SELECT address FROM dim_contracts)\n```\n\n**Note**: For token transfers, this is the token contract, not the recipient. See ez_token_transfers tables for recipient."}, "ORIGIN_FUNCTION_SIGNATURE": {"type": "TEXT", "index": 16, "name": "ORIGIN_FUNCTION_SIGNATURE", "comment": "Function signature (first 4 bytes) of the called method.\n\n**Format**: 0x + 8 hex characters\n\n**Common Signatures**:\n- 0xa9059cbb: transfer(address,uint256)\n- 0x095ea7b3: approve(address,uint256)\n- 0x23b872dd: transferFrom(address,address,uint256)\n\n**Note**: NULL for simple transfers or invalid calls"}, "TX_SUCCEEDED": {"type": "BOOLEAN", "index": 17, "name": "TX_SUCCEEDED", "comment": "Boolean indicator of transaction success.\n\n**Values**:\n- TRUE: Transaction executed successfully\n- FALSE: Transaction failed/reverted"}, "FACT_EVENT_LOGS_ID": {"type": "TEXT", "index": 18, "name": "FACT_EVENT_LOGS_ID", "comment": "Primary key - unique identifier for each row ensuring data integrity.\n\n**Format**: Usually VARCHAR containing composite key generated using MD5 hash of the relevant columns.\n**Example**: MD5(block_number, tx_hash, trace_index)\n\n**Usage**:\n- Deduplication in incremental loads\n- Join operations for data quality checks\n- Troubleshooting specific records\n\n**Important**: Implementation varies by table - check table-specific documentation."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 19, "name": "INSERTED_TIMESTAMP", "comment": "UTC timestamp when the record was first added to the Flipside database.\n\n**Format**: TIMESTAMP_NTZ\n\n**Use Cases**:\n- Data freshness monitoring\n- Incremental processing markers\n- Debugging data pipeline issues\n- SLA tracking\n\n**Query Example**:\n```sql\n-- Check data latency\nSELECT \n    DATE_TRUNC('hour', block_timestamp) as block_hour,\n    DATE_TRUNC('hour', inserted_timestamp) as insert_hour,\n    AVG(TIMESTAMPDIFF('minute', block_timestamp, inserted_timestamp)) as avg_latency_minutes\nFROM <blockchain_name>.core.fact_transactions\nWHERE block_timestamp >= CURRENT_DATE - 1\nGROUP BY 1, 2;\n```"}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 20, "name": "MODIFIED_TIMESTAMP", "comment": "UTC timestamp of the most recent update to this record.\n\n**Format**: TIMESTAMP_NTZ\n\n**Triggers for Updates**:\n- Data corrections\n- Enrichment additions\n- Reprocessing for accuracy\n- Schema migrations\n\n**Monitoring Usage**:\n```sql\n-- Recently modified records\nSELECT *\nFROM <blockchain_name>.core.fact_transactions\nWHERE modified_timestamp > inserted_timestamp\nAND modified_timestamp >= CURRENT_DATE - 1;\n\n-- Data quality tracking\nSELECT \n    DATE(modified_timestamp) as mod_date,\n    COUNT(*) as records_updated,\n    COUNT(DISTINCT block_number) as blocks_affected\nFROM <blockchain_name>.core.fact_transactions\nWHERE modified_timestamp > inserted_timestamp\nGROUP BY 1\nORDER BY 1 DESC;\n```"}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 5588042179, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-10-27 15:24UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 799218302464, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.livequery_models.ethereum_core.fact_event_logs"}, "source.livequery_models.ethereum_core.ez_decoded_event_logs": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "EZ_DECODED_EVENT_LOGS", "database": "ETHEREUM_DEV", "comment": "## What\n\nThis table provides human-readable decoded event data for smart contracts where ABIs are available. It transforms raw hex-encoded logs into structured JSON with named parameters and values, making blockchain data immediately queryable without manual decoding.\n\n## Key Use Cases\n\n- Analyzing token transfers and approvals without manual decoding\n- Tracking DEX swaps and liquidity events with named parameters\n- Monitoring NFT transfers and marketplace activity\n- Querying DeFi protocol interactions (lending, staking, governance)\n- Building analytics on any smart contract with available ABIs\n\n## Important Relationships\n\n- **Join with fact_event_logs**: Use `tx_hash` and `event_index` for raw event data\n- **Join with dim_contracts**: Use `contract_address` for contract metadata\n- **Join with fact_transactions**: Use `tx_hash` for transaction context\n- **Cross-reference ez_token_transfers**: For simplified token movement data\n\n## Commonly-used Fields\n\n- `contract_address`: The smart contract that emitted the event\n- `event_name`: The event name from the contract ABI (e.g., Transfer, Swap)\n- `decoded_log`: JSON object with decoded parameter names and values\n- `contract_name`: Human-readable name of the contract\n- `block_timestamp`: When the event occurred\n- `tx_hash`: Transaction hash containing this event\n\n## Sample queries\n\n**ERC-20 Transfer Events with Proper Types**\n\n```sql\nSELECT \n    block_timestamp,\n    tx_hash,\n    contract_address,\n    contract_name,\n    event_name,\n    decoded_log:from::string AS from_address,\n    decoded_log:to::string AS to_address,\n    decoded_log:value::numeric AS amount,\n    -- Convert to decimal (assuming 18 decimals)\n    decoded_log:value::numeric / POW(10, 18) AS amount_decimal\nFROM <blockchain_name>.core.ez_decoded_event_logs\nWHERE contract_address = LOWER('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48') -- USDC\n    AND event_name = 'Transfer'\n    AND block_timestamp >= CURRENT_DATE - 7\n    AND decoded_log:value::numeric > 1000000000 -- Over 1000 USDC\nORDER BY block_timestamp DESC;\n```\n\n**Uniswap V3 Swap Events**\n\n```sql\nSELECT \n    block_timestamp,\n    tx_hash,\n    contract_address AS pool_address,\n    event_name,\n    decoded_log:sender::string AS sender,\n    decoded_log:recipient::string AS recipient,\n    decoded_log:amount0::numeric AS amount0,\n    decoded_log:amount1::numeric AS amount1,\n    decoded_log:sqrtPriceX96::numeric AS sqrt_price,\n    decoded_log:liquidity::numeric AS liquidity,\n    decoded_log:tick::integer AS tick\nFROM <blockchain_name>.core.ez_decoded_event_logs\nWHERE event_name = 'Swap'\n    AND contract_address IN (\n        SELECT address FROM dim_contracts \n        WHERE contract_name ILIKE '%Uniswap V3%'\n    )\n    AND block_timestamp >= CURRENT_DATE - 1\nLIMIT 100;\n```\n\n**NFT Transfer Events (ERC-721)**\n\n```sql\nSELECT \n    block_timestamp,\n    tx_hash,\n    contract_address,\n    contract_name AS collection_name,\n    decoded_log:from::string AS from_address,\n    decoded_log:to::string AS to_address,\n    decoded_log:tokenId::string AS token_id\nFROM <blockchain_name>.core.ez_decoded_event_logs\nWHERE event_name = 'Transfer'\n    AND decoded_log:tokenId IS NOT NULL  -- Indicates ERC-721\n    AND block_timestamp >= CURRENT_DATE - 1\nORDER BY block_timestamp DESC;\n```\n\n**DeFi Protocol Events - Compound Finance**\n\n```sql\nSELECT \n    DATE_TRUNC('day', block_timestamp) AS day,\n    event_name,\n    COUNT(*) AS event_count,\n    COUNT(DISTINCT decoded_log:minter::string) AS unique_users\nFROM <blockchain_name>.core.ez_decoded_event_logs\nWHERE contract_name ILIKE '%compound%'\n    AND event_name IN ('Mint', 'Redeem', 'Borrow', 'RepayBorrow')\n    AND block_timestamp >= CURRENT_DATE - 30\nGROUP BY 1, 2\nORDER BY 1 DESC, 3 DESC;\n```\n\n**Complex Event Analysis - DEX Aggregator Routes**\n\n```sql\nSELECT \n    block_timestamp,\n    tx_hash,\n    event_name,\n    decoded_log,\n    ARRAY_SIZE(decoded_log:path) AS swap_hops,\n    decoded_log:amountIn::numeric AS amount_in,\n    decoded_log:amountOutMin::numeric AS min_amount_out\nFROM <blockchain_name>.core.ez_decoded_event_logs\nWHERE contract_address = LOWER('0x1111111254fb6c44bAC0beD2854e76F90643097d') -- 1inch\n    AND event_name ILIKE '%swap%'\n    AND block_timestamp >= CURRENT_DATE - 1;\n```", "owner": "INTERNAL_DEV"}, "columns": {"BLOCK_NUMBER": {"type": "NUMBER", "index": 1, "name": "BLOCK_NUMBER", "comment": "Sequential counter representing the position of a block in the blockchain since genesis (block 0).\n\n**Key Facts**:\n- Immutable once finalized\n- Primary ordering mechanism for blockchain data\n- Increments by 1 for each new block\n- Used as a proxy for time in many analyses\n\n**Usage in Queries**:\n```sql\n-- Recent data\nWHERE block_number >= (SELECT MAX(block_number) - 1000 FROM fact_blocks)\n\n-- Historical analysis\nWHERE block_number BETWEEN 15000000 AND 16000000\n\n-- Join across tables\nJOIN <blockchain_name>.core.fact_event_logs USING (block_number)\n```\n\n**Important**: Block numbers are chain-specific. Block 15000000 on Ethereum \u2260 block 15000000 on Polygon."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "UTC timestamp when the block was produced by validators/miners.\n\n**Format**: TIMESTAMP_NTZ (no timezone)\n**Precision**: Second-level accuracy\n**Reliability**:\n- Set by block producer\n- Can have minor variations (\u00b115 seconds)\n- Always increasing (newer blocks = later timestamps)\n\n**Best Practices**:\n```sql\n-- Time-based filtering (most efficient)\nWHERE block_timestamp >= DATEADD('day', -7, CURRENT_TIMESTAMP)\n\n-- Hourly aggregations\nDATE_TRUNC('hour', block_timestamp) AS hour\n\n-- UTC date extraction\nDATE(block_timestamp) AS block_date\n```\n\n**Note**: Use for time-series analysis, but be aware that block production rates vary by chain."}, "TX_HASH": {"type": "TEXT", "index": 3, "name": "TX_HASH", "comment": "Unique 66-character identifier for the transaction.\n\n**Format**: 0x + 64 hexadecimal characters\n\n**Usage**:\n- Primary key for transaction lookups\n- Join key for traces, logs, and token transfers\n- Immutable once confirmed\n\n**Example**: `0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060`"}, "TX_POSITION": {"type": "NUMBER", "index": 4, "name": "TX_POSITION", "comment": "Zero-indexed position of transaction within its block.\n\n**Insights**:\n- Position 0: First transaction in block\n- MEV bots often target early positions\n- Bundle transactions appear consecutively\n- Useful for analyzing transaction ordering"}, "EVENT_INDEX": {"type": "NUMBER", "index": 5, "name": "EVENT_INDEX", "comment": "Zero-based sequential position of the event within a transaction's execution.\n\n**Key Facts**:\n- Starts at 0 for first event\n- Increments across all contracts in transaction\n- Preserves execution order\n- Essential for deterministic event ordering\n\n**Usage Example**:\n```sql\n-- Trace event execution flow\nSELECT \n    event_index,\n    contract_address,\n    topic_0,\n    SUBSTRING(data, 1, 10) AS data_preview\nFROM <blockchain_name>.core.fact_event_logs\nWHERE tx_hash = '0xabc...'\nORDER BY event_index;\n```"}, "CONTRACT_ADDRESS": {"type": "TEXT", "index": 6, "name": "CONTRACT_ADDRESS", "comment": "Smart contract address that emitted this event or received the transaction.\n\n**Key Points**:\n- Always the immediate event emitter for logs\n- May differ from transaction to_address\n- Lowercase normalized format\n- Never NULL for valid events"}, "TOPICS": {"type": "VARIANT", "index": 7, "name": "TOPICS", "comment": "Array containing all indexed parameters of the event.\n\nExample: ['0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', '0x0000000000000000000000001234567890123456789012345678901234567890']"}, "TOPIC_0": {"type": "TEXT", "index": 8, "name": "TOPIC_0", "comment": "Event signature hash - keccak256 of the event declaration.\n\nExample: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'"}, "TOPIC_1": {"type": "TEXT", "index": 9, "name": "TOPIC_1", "comment": "First indexed parameter of the event (if exists).\n\nExample: '0x0000000000000000000000001234567890123456789012345678901234567890'"}, "TOPIC_2": {"type": "TEXT", "index": 10, "name": "TOPIC_2", "comment": "Second indexed parameter of the event (if exists).\n\nExample: '0x000000000000000000000000abcdefabcdefabcdefabcdefabcdefabcdefabcd'"}, "TOPIC_3": {"type": "TEXT", "index": 11, "name": "TOPIC_3", "comment": "Third indexed parameter of the event (if exists).\n\nExample: '0x0000000000000000000000000000000000000000000000000000000000000001'"}, "DATA": {"type": "TEXT", "index": 12, "name": "DATA", "comment": "Hex-encoded non-indexed event parameters.\n\nExample: '0x0000000000000000000000000000000000000000000000000de0b6b3a7640000'"}, "EVENT_REMOVED": {"type": "BOOLEAN", "index": 13, "name": "EVENT_REMOVED", "comment": "Boolean flag indicating if the event was removed due to chain reorganization.\n\nExample: false"}, "ORIGIN_FROM_ADDRESS": {"type": "TEXT", "index": 14, "name": "ORIGIN_FROM_ADDRESS", "comment": "The externally-owned account (EOA) or contract address that initiated the transaction.\n\n**Key Points**:\n- Always 42 characters (0x + 40 hex chars)\n- Lowercase normalized in all tables\n- Cannot be NULL for valid transactions\n- For contract creation: sender of creation transaction\n\n**Common Patterns**:\n- EOA \u2192 EOA: Simple transfer\n- EOA \u2192 Contract: User interaction\n- Contract \u2192 Contract: Internal calls (see fact_traces)\n- Known addresses: Exchange hot wallets, protocol deployers\n\n**Query Examples**:\n```sql\n-- User activity analysis\nSELECT from_address, COUNT(*) as tx_count\nFROM <blockchain_name>.core.fact_transactions\nWHERE block_timestamp >= CURRENT_DATE - 30\nGROUP BY 1\nORDER BY 2 DESC;\n\n-- New user detection\nSELECT DISTINCT from_address\nFROM <blockchain_name>.core.fact_transactions t1\nWHERE NOT EXISTS (\n    SELECT 1 FROM <blockchain_name>.core.fact_transactions t2 \n    WHERE t2.from_address = t1.from_address \n    AND t2.block_number < t1.block_number\n);\n```"}, "ORIGIN_TO_ADDRESS": {"type": "TEXT", "index": 15, "name": "ORIGIN_TO_ADDRESS", "comment": "The destination address for the transaction - either an EOA or contract address.\n\n**Special Cases**:\n- NULL: Contract creation transaction\n- Contract address: Interacting with smart contract\n- EOA address: Simple transfer or receiving funds\n\n**Important Patterns**:\n```sql\n-- Contract deployments\nWHERE to_address IS NULL\n\n-- Popular contracts\nSELECT to_address, COUNT(*) as interactions\nFROM <blockchain_name>.core.fact_transactions\nWHERE to_address IS NOT NULL\nGROUP BY 1\nORDER BY 2 DESC;\n\n-- Direct transfers only\nWHERE to_address NOT IN (SELECT address FROM dim_contracts)\n```\n\n**Note**: For token transfers, this is the token contract, not the recipient. See ez_token_transfers tables for recipient."}, "ORIGIN_FUNCTION_SIGNATURE": {"type": "TEXT", "index": 16, "name": "ORIGIN_FUNCTION_SIGNATURE", "comment": "Function signature (first 4 bytes) of the called method.\n\n**Format**: 0x + 8 hex characters\n\n**Common Signatures**:\n- 0xa9059cbb: transfer(address,uint256)\n- 0x095ea7b3: approve(address,uint256)\n- 0x23b872dd: transferFrom(address,address,uint256)\n\n**Note**: NULL for simple transfers or invalid calls"}, "TX_SUCCEEDED": {"type": "BOOLEAN", "index": 17, "name": "TX_SUCCEEDED", "comment": "Boolean indicator of transaction success.\n\n**Values**:\n- TRUE: Transaction executed successfully\n- FALSE: Transaction failed/reverted"}, "EVENT_NAME": {"type": "TEXT", "index": 18, "name": "EVENT_NAME", "comment": "The event name as defined in the contract's ABI.\n\n**Format**: PascalCase event identifier\n**Examples**:\n- `Transfer` - Token transfers\n- `Swap` - DEX trades  \n- `OwnershipTransferred` - Admin changes\n- `Approval` - Token approvals\n\n**Usage Pattern**:\n\n```sql\n-- Find all event types for a contract\nSELECT DISTINCT event_name, COUNT(*) as occurrences\nFROM ez_decoded_event_logs\nWHERE contract_address = LOWER('0x...')\nGROUP BY 1\nORDER BY 2 DESC;\n```"}, "FULL_DECODED_LOG": {"type": "VARIANT", "index": 19, "name": "FULL_DECODED_LOG", "comment": "Complete decoded event data including parameter names, values, types, and metadata.\n\nExample: '{\"event_name\": \"Transfer\", \"parameters\": [{\"name\": \"from\", \"type\": \"address\", \"value\": \"0x123...\", \"indexed\": true}]}'"}, "DECODED_LOG": {"type": "OBJECT", "index": 20, "name": "DECODED_LOG", "comment": "Flattened JSON object containing decoded event parameters with their values.\n\nExample: '{\"from\": \"0x123...\", \"to\": \"0x456...\", \"value\": \"1000000000000000000\"}'"}, "CONTRACT_NAME": {"type": "TEXT", "index": 21, "name": "CONTRACT_NAME", "comment": "Human-readable name of the smart contract emitting the event, joined from dim_contracts.\n\nExample: 'USD Coin'"}, "EZ_DECODED_EVENT_LOGS_ID": {"type": "TEXT", "index": 22, "name": "EZ_DECODED_EVENT_LOGS_ID", "comment": "Primary key - unique identifier for each row ensuring data integrity.\n\n**Format**: Usually VARCHAR containing composite key generated using MD5 hash of the relevant columns.\n**Example**: MD5(block_number, tx_hash, trace_index)\n\n**Usage**:\n- Deduplication in incremental loads\n- Join operations for data quality checks\n- Troubleshooting specific records\n\n**Important**: Implementation varies by table - check table-specific documentation."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 23, "name": "INSERTED_TIMESTAMP", "comment": "UTC timestamp when the record was first added to the Flipside database.\n\n**Format**: TIMESTAMP_NTZ\n\n**Use Cases**:\n- Data freshness monitoring\n- Incremental processing markers\n- Debugging data pipeline issues\n- SLA tracking\n\n**Query Example**:\n```sql\n-- Check data latency\nSELECT \n    DATE_TRUNC('hour', block_timestamp) as block_hour,\n    DATE_TRUNC('hour', inserted_timestamp) as insert_hour,\n    AVG(TIMESTAMPDIFF('minute', block_timestamp, inserted_timestamp)) as avg_latency_minutes\nFROM <blockchain_name>.core.fact_transactions\nWHERE block_timestamp >= CURRENT_DATE - 1\nGROUP BY 1, 2;\n```"}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 24, "name": "MODIFIED_TIMESTAMP", "comment": "UTC timestamp of the most recent update to this record.\n\n**Format**: TIMESTAMP_NTZ\n\n**Triggers for Updates**:\n- Data corrections\n- Enrichment additions\n- Reprocessing for accuracy\n- Schema migrations\n\n**Monitoring Usage**:\n```sql\n-- Recently modified records\nSELECT *\nFROM <blockchain_name>.core.fact_transactions\nWHERE modified_timestamp > inserted_timestamp\nAND modified_timestamp >= CURRENT_DATE - 1;\n\n-- Data quality tracking\nSELECT \n    DATE(modified_timestamp) as mod_date,\n    COUNT(*) as records_updated,\n    COUNT(DISTINCT block_number) as blocks_affected\nFROM <blockchain_name>.core.fact_transactions\nWHERE modified_timestamp > inserted_timestamp\nGROUP BY 1\nORDER BY 1 DESC;\n```"}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 4924621421, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-10-27 15:24UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 1298632969728, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::date)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.livequery_models.ethereum_core.ez_decoded_event_logs"}, "source.canton_models.crosschain_silver.labels_combined": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "LABELS_COMBINED", "database": "CROSSCHAIN", "comment": null, "owner": "DBT_CLOUD_CROSSCHAIN"}, "columns": {"SYSTEM_CREATED_AT": {"type": "TIMESTAMP_LTZ", "index": 1, "name": "SYSTEM_CREATED_AT", "comment": ""}, "INSERT_DATE": {"type": "TIMESTAMP_LTZ", "index": 2, "name": "INSERT_DATE", "comment": "The date the label was inserted in the table"}, "BLOCKCHAIN": {"type": "TEXT", "index": 3, "name": "BLOCKCHAIN", "comment": "The name of the blockchain"}, "ADDRESS": {"type": "TEXT", "index": 4, "name": "ADDRESS", "comment": "Address that the label is for. This is the field that should be used to join other tables with labels."}, "CREATOR": {"type": "TEXT", "index": 5, "name": "CREATOR", "comment": "The name of the creator of the label"}, "LABEL_TYPE": {"type": "TEXT", "index": 6, "name": "LABEL_TYPE", "comment": "A high-level category describing the addresses main function or ownership"}, "LABEL_SUBTYPE": {"type": "TEXT", "index": 7, "name": "LABEL_SUBTYPE", "comment": "A sub-category nested within label type providing further detail"}, "ADDRESS_NAME": {"type": "TEXT", "index": 8, "name": "ADDRESS_NAME", "comment": "Name of the address"}, "PROJECT_NAME": {"type": "TEXT", "index": 9, "name": "PROJECT_NAME", "comment": "Name of the controlling entity of the address"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 10, "name": "INSERTED_TIMESTAMP", "comment": "The utc timestamp at which the row was inserted into the table."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 11, "name": "MODIFIED_TIMESTAMP", "comment": "The utc timestamp at which the row was last modified."}, "LABELS_COMBINED_ID": {"type": "TEXT", "index": 12, "name": "LABELS_COMBINED_ID", "comment": "The unique identifier for each row in the table."}, "SOURCE": {"type": "TEXT", "index": 13, "name": "SOURCE", "comment": ""}, "_IS_DELETED": {"type": "BOOLEAN", "index": 14, "name": "_IS_DELETED", "comment": ""}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 775621826, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 02:46UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 33269751296, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(blockchain, _is_deleted, modified_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.canton_models.crosschain_silver.labels_combined"}, "source.canton_models.crosschain.dim_dates": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "DIM_DATES", "database": "CROSSCHAIN", "comment": "Hold rows for each date from 2017 - 2030", "owner": "DBT_CLOUD_CROSSCHAIN"}, "columns": {"DATE_DAY": {"type": "DATE", "index": 1, "name": "DATE_DAY", "comment": "date for the row"}, "PRIOR_DATE_DAY": {"type": "DATE", "index": 2, "name": "PRIOR_DATE_DAY", "comment": "date before DATE_DAY"}, "NEXT_DATE_DAY": {"type": "DATE", "index": 3, "name": "NEXT_DATE_DAY", "comment": "date after DATE_DAY"}, "PRIOR_YEAR_DATE_DAY": {"type": "DATE", "index": 4, "name": "PRIOR_YEAR_DATE_DAY", "comment": "date exactly 1 year before DATE_DAY"}, "PRIOR_YEAR_OVER_YEAR_DATE_DAY": {"type": "DATE", "index": 5, "name": "PRIOR_YEAR_OVER_YEAR_DATE_DAY", "comment": "date exactly 1 year after DATE_DAY"}, "DAY_OF_WEEK": {"type": "NUMBER", "index": 6, "name": "DAY_OF_WEEK", "comment": "number representing day of week for DATE_DAY where 1=Sunday"}, "DAY_OF_WEEK_ISO": {"type": "NUMBER", "index": 7, "name": "DAY_OF_WEEK_ISO", "comment": "number representing day of week for DATE_DAY where 1=Monday"}, "DAY_OF_WEEK_NAME": {"type": "TEXT", "index": 8, "name": "DAY_OF_WEEK_NAME", "comment": "day of week name for DATE_DAY"}, "DAY_OF_WEEK_NAME_SHORT": {"type": "TEXT", "index": 9, "name": "DAY_OF_WEEK_NAME_SHORT", "comment": "day of week abbreviation for DATE_DAY"}, "DAY_OF_MONTH": {"type": "NUMBER", "index": 10, "name": "DAY_OF_MONTH", "comment": "day of month for DATE_DAY"}, "DAY_OF_YEAR": {"type": "NUMBER", "index": 11, "name": "DAY_OF_YEAR", "comment": "day of year for DATE_DAY"}, "WEEK_START_DATE": {"type": "DATE", "index": 12, "name": "WEEK_START_DATE", "comment": "date representing the start of the week for DATE_DAY"}, "WEEK_END_DATE": {"type": "DATE", "index": 13, "name": "WEEK_END_DATE", "comment": "date representing the end of the week for DATE_DAY"}, "PRIOR_YEAR_WEEK_START_DATE": {"type": "DATE", "index": 14, "name": "PRIOR_YEAR_WEEK_START_DATE", "comment": "date representing the start of the week for PRIOR_YEAR_DATE_DAY"}, "PRIOR_YEAR_WEEK_END_DATE": {"type": "DATE", "index": 15, "name": "PRIOR_YEAR_WEEK_END_DATE", "comment": "date representing the end of the week for PRIOR_YEAR_DATE_DAY"}, "WEEK_OF_YEAR": {"type": "NUMBER", "index": 16, "name": "WEEK_OF_YEAR", "comment": "number representing the week of the year for DATE_DAY"}, "ISO_WEEK_START_DATE": {"type": "DATE", "index": 17, "name": "ISO_WEEK_START_DATE", "comment": "ISO date representing the start of the week for DATE_DAY"}, "ISO_WEEK_END_DATE": {"type": "DATE", "index": 18, "name": "ISO_WEEK_END_DATE", "comment": "ISO date representing the end of the week for DATE_DAY"}, "PRIOR_YEAR_ISO_WEEK_START_DATE": {"type": "DATE", "index": 19, "name": "PRIOR_YEAR_ISO_WEEK_START_DATE", "comment": "ISO date representing the start of the week for PRIOR_YEAR_DATE_DAY"}, "PRIOR_YEAR_ISO_WEEK_END_DATE": {"type": "DATE", "index": 20, "name": "PRIOR_YEAR_ISO_WEEK_END_DATE", "comment": "ISO date representing the end of the week for PRIOR_YEAR_DATE_DAY"}, "ISO_WEEK_OF_YEAR": {"type": "NUMBER", "index": 21, "name": "ISO_WEEK_OF_YEAR", "comment": "number representing the ISO week of the year for DATE_DAY"}, "PRIOR_YEAR_WEEK_OF_YEAR": {"type": "NUMBER", "index": 22, "name": "PRIOR_YEAR_WEEK_OF_YEAR", "comment": "number representing the week of the year for PRIOR_YEAR_DATE_DAY"}, "PRIOR_YEAR_ISO_WEEK_OF_YEAR": {"type": "NUMBER", "index": 23, "name": "PRIOR_YEAR_ISO_WEEK_OF_YEAR", "comment": "number representing the ISO week of the year for PRIOR_YEAR_DATE_DAY"}, "MONTH_OF_YEAR": {"type": "NUMBER", "index": 24, "name": "MONTH_OF_YEAR", "comment": "number representing the month of the year for DATE_DAY"}, "MONTH_NAME": {"type": "TEXT", "index": 25, "name": "MONTH_NAME", "comment": "month of year name for DATE_DAY"}, "MONTH_NAME_SHORT": {"type": "TEXT", "index": 26, "name": "MONTH_NAME_SHORT", "comment": "month of year abbreviation for DATE_DAY"}, "MONTH_START_DATE": {"type": "DATE", "index": 27, "name": "MONTH_START_DATE", "comment": "first date of month for DATE_DAY"}, "MONTH_END_DATE": {"type": "DATE", "index": 28, "name": "MONTH_END_DATE", "comment": "last date of month for DATE_DAY"}, "PRIOR_YEAR_MONTH_START_DATE": {"type": "DATE", "index": 29, "name": "PRIOR_YEAR_MONTH_START_DATE", "comment": "first date of month for PRIOR_YEAR_DATE_DAY"}, "PRIOR_YEAR_MONTH_END_DATE": {"type": "DATE", "index": 30, "name": "PRIOR_YEAR_MONTH_END_DATE", "comment": "last date of month for PRIOR_YEAR_DATE_DAY"}, "QUARTER_OF_YEAR": {"type": "NUMBER", "index": 31, "name": "QUARTER_OF_YEAR", "comment": "number representing quarter for DATE_DAY"}, "QUARTER_START_DATE": {"type": "DATE", "index": 32, "name": "QUARTER_START_DATE", "comment": "first date of quarter for DATE_DAY"}, "QUARTER_END_DATE": {"type": "DATE", "index": 33, "name": "QUARTER_END_DATE", "comment": "last date of quarter for DATE_DAY"}, "YEAR_NUMBER": {"type": "NUMBER", "index": 34, "name": "YEAR_NUMBER", "comment": "number presenting the year for DATE_DAY"}, "YEAR_START_DATE": {"type": "DATE", "index": 35, "name": "YEAR_START_DATE", "comment": "first date of year for DATE_DAY"}, "YEAR_END_DATE": {"type": "DATE", "index": 36, "name": "YEAR_END_DATE", "comment": "last date of year for DATE_DAY"}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 8034, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-01-12 01:06UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 313856, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.canton_models.crosschain.dim_dates"}, "source.canton_models.crosschain_silver.complete_token_asset_metadata": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "COMPLETE_TOKEN_ASSET_METADATA", "database": "CROSSCHAIN", "comment": null, "owner": "DBT_CLOUD_CROSSCHAIN"}, "columns": {"TOKEN_ADDRESS": {"type": "TEXT", "index": 1, "name": "TOKEN_ADDRESS", "comment": ""}, "ASSET_ID": {"type": "TEXT", "index": 2, "name": "ASSET_ID", "comment": ""}, "SYMBOL": {"type": "TEXT", "index": 3, "name": "SYMBOL", "comment": ""}, "NAME": {"type": "TEXT", "index": 4, "name": "NAME", "comment": ""}, "DECIMALS": {"type": "NUMBER", "index": 5, "name": "DECIMALS", "comment": ""}, "BLOCKCHAIN": {"type": "TEXT", "index": 6, "name": "BLOCKCHAIN", "comment": ""}, "BLOCKCHAIN_NAME": {"type": "TEXT", "index": 7, "name": "BLOCKCHAIN_NAME", "comment": ""}, "BLOCKCHAIN_ID": {"type": "TEXT", "index": 8, "name": "BLOCKCHAIN_ID", "comment": ""}, "IS_DEPRECATED": {"type": "BOOLEAN", "index": 9, "name": "IS_DEPRECATED", "comment": ""}, "PROVIDER": {"type": "TEXT", "index": 10, "name": "PROVIDER", "comment": ""}, "SOURCE": {"type": "TEXT", "index": 11, "name": "SOURCE", "comment": ""}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 12, "name": "_INSERTED_TIMESTAMP", "comment": ""}, "IS_VERIFIED": {"type": "BOOLEAN", "index": 13, "name": "IS_VERIFIED", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 14, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 15, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "COMPLETE_TOKEN_ASSET_METADATA_ID": {"type": "TEXT", "index": 16, "name": "COMPLETE_TOKEN_ASSET_METADATA_ID", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 17, "name": "_INVOCATION_ID", "comment": ""}, "IS_VERIFIED_MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 19, "name": "IS_VERIFIED_MODIFIED_TIMESTAMP", "comment": ""}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 23581267, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 14:42UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 2069620224, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(blockchain)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.canton_models.crosschain_silver.complete_token_asset_metadata"}, "source.canton_models.crosschain_silver.complete_token_prices": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "COMPLETE_TOKEN_PRICES", "database": "CROSSCHAIN", "comment": null, "owner": "DBT_CLOUD_CROSSCHAIN"}, "columns": {"HOUR": {"type": "TIMESTAMP_NTZ", "index": 1, "name": "HOUR", "comment": ""}, "TOKEN_ADDRESS": {"type": "TEXT", "index": 2, "name": "TOKEN_ADDRESS", "comment": ""}, "ASSET_ID": {"type": "TEXT", "index": 3, "name": "ASSET_ID", "comment": ""}, "SYMBOL": {"type": "TEXT", "index": 4, "name": "SYMBOL", "comment": ""}, "NAME": {"type": "TEXT", "index": 5, "name": "NAME", "comment": ""}, "DECIMALS": {"type": "NUMBER", "index": 6, "name": "DECIMALS", "comment": ""}, "PRICE": {"type": "FLOAT", "index": 7, "name": "PRICE", "comment": ""}, "BLOCKCHAIN": {"type": "TEXT", "index": 8, "name": "BLOCKCHAIN", "comment": ""}, "BLOCKCHAIN_NAME": {"type": "TEXT", "index": 9, "name": "BLOCKCHAIN_NAME", "comment": ""}, "BLOCKCHAIN_ID": {"type": "TEXT", "index": 10, "name": "BLOCKCHAIN_ID", "comment": ""}, "IS_IMPUTED": {"type": "BOOLEAN", "index": 11, "name": "IS_IMPUTED", "comment": ""}, "IS_DEPRECATED": {"type": "BOOLEAN", "index": 12, "name": "IS_DEPRECATED", "comment": ""}, "PROVIDER": {"type": "TEXT", "index": 13, "name": "PROVIDER", "comment": ""}, "SOURCE": {"type": "TEXT", "index": 14, "name": "SOURCE", "comment": ""}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 15, "name": "_INSERTED_TIMESTAMP", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 16, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 17, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "COMPLETE_TOKEN_PRICES_ID": {"type": "TEXT", "index": 18, "name": "COMPLETE_TOKEN_PRICES_ID", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 19, "name": "_INVOCATION_ID", "comment": ""}, "IS_VERIFIED": {"type": "BOOLEAN", "index": 21, "name": "IS_VERIFIED", "comment": ""}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 1028402583, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-11-01 13:54UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 50165908992, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(hour::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.canton_models.crosschain_silver.complete_token_prices"}, "source.canton_models.crosschain_silver.number_sequence": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "NUMBER_SEQUENCE", "database": "CROSSCHAIN", "comment": null, "owner": "DBT_CLOUD_CROSSCHAIN"}, "columns": {"_ID": {"type": "NUMBER", "index": 1, "name": "_ID", "comment": null}}, "stats": {"row_count": {"id": "row_count", "label": "Row Count", "value": 1000000000, "include": true, "description": "An approximate count of rows in this table"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-01-13 08:28UTC", "include": true, "description": "The timestamp for last update/change"}, "bytes": {"id": "bytes", "label": "Approximate Size", "value": 1008582144, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(round(_id,-3))", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.canton_models.crosschain_silver.number_sequence"}}, "errors": null}